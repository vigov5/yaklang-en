newResult = func( url, reqRaw, respRaw) {
    return { "url": url,   "reqRaw": reqRaw, "respRaw": respRaw }
}

//checkErr Check for errors and exit
checkErr = func(err) {
    if err != nil {
        yakit.Output(sprintf("csrf-DETECT error: %s", err))
        os.Exit(1)
    }
}

description = `
Cross-Site Request Forgery (CSRF) is a type of network attack method. The attacker induces the user to click on a link, visit a website, or load an image, causing the user to send a message without knowing it. Default request. This request usually corresponds to some operations with certain side effects, such as changing passwords, purchasing goods, etc.

Risk description:“This page may contain a form that is not protected by CSRF”, the meaning of this sentence is that a certain form on this page may have a CSRF vulnerability. If an attacker exploits this vulnerability, they can construct a specific request. When a user accesses a link or page, this request will be sent out, thus performing the attackers preset operation.

Potential risk: If a form does not have appropriate CSRF protection, then an attacker can exploit this vulnerability. This may lead to malicious operations on the users account, such as changing account settings, conducting illegal transactions, or even stealing the users account.

Protection measures: In order to prevent CSRF attacks, developers need to add CSRF tokens to the form. When the user submits the form, the server validates the token and if the tokens do not match, the request is rejected. In addition, you can also use technologies such as Same-Origin Policy and Content Security Policy to prevent CSRF attacks.
    `
csrfLog = func(result){
    url = result.url
    reqRaw = result.reqRaw
    respRaw = result.respRaw
    msg = "This page may contain a form without CSRF protection."
    solution = `
1. Use CSRF tokens: On each form submission, the server should generate a unique, random CSRF token and embed it into the form. When the form is submitted, the server should verify that the submitted token matches the previously generated token. If the tokens do not match, the request should be considered illegal and rejected.

2. Verify Referer header: The server can verify the HTTP Referer header to ensure that the request is sent from a trusted source. If the Referer header does not match the expected origin, the server SHOULD reject the request.

3. Use SameSite Cookies: SameSite cookie attributes prevent CSRF attacks because they only allow cookies to be sent in the context of the same site, preventing cross-site requests. `

    report = {"message": msg, url:url}
    yakit.Output(report)
    risk.NewRisk(
            url,
            risk.title(sprintf("csrf for: %v", url)),
            risk.details(report),
            risk.solution(solution),
            risk.description(description),
            risk.type("csrf"),
            risk.request(reqRaw),
            risk.response(respRaw),
            risk.severity("low"),
    )
}

corsLog = func(result){
    url = result.url
    reqRaw = result.reqRaw
    respRaw = result.respRaw
    msg = "CORS configuration insecure"
    description = `
`
    solution = `
1. Limit the allowed sources: The CORS policy should clearly specify which sources are allowed to make cross-origin requests, rather than simply allowing all sources. This can be achieved by setting the Access-Control-Allow-Origin header.

2. Limit the allowed HTTP methods: The HTTP methods allowed for cross-origin requests should be restricted. For example, only GET and POST requests might be allowed.

3. Use preflight requests: For HTTP request methods that may have side effects on server data (e.g., PUT, DELETE), CORS preflight requests should be used to ensure that the server accepts the request. Preflight requests are implemented by sending an OPTIONS request with Access-Control-Request-Method and Access-Control-Request-Headers headers.

4. Avoid trusting cookies: Cookies should not be trusted or relied upon for cross-origin requests. Because cookies can be manipulated by third-party websites, they should not be used for authentication or session management. `

    report = {"message": msg, url:url}
    yakit.Output(report)
    risk.NewRisk(
            url,
            risk.title(sprintf("cors unsafe for: %v", url)),
            risk.details(report),
            risk.description(description),
            risk.solution(solution),
            risk.type("cors"),
            risk.request(reqRaw),
            risk.response(respRaw),
            risk.severity("info"),
    )
}

csrf_Detect =  func(url,req,rsp,body,ishttps){
    lowHttpRsp,_,err = poc.HTTPEx(req, [poc.deleteHeader("Cookie"),poc.https(ishttps)]...)
    checkErr(err)
    rspWithoutCookie = lowHttpRsp.RedirectRawPackets[0].Response

    phtml, err = xpath.LoadHTMLDocument(body)
    checkErr(err)
    html, err = xpath.LoadHTMLDocument(poc.GetHTTPPacketBody(rspWithoutCookie))
    checkErr(err)
    pforms = xpath.Find(phtml,"//form")
    forms = xpath.Find(html,"//form")



    dforms = []
    for pform in pforms{
        flag = true
        for form in forms{
            if formCompare(pform,form){
                flag = false
                break
            }
        }
        if flag{
            dforms.Append(pform)
        }
    }

    for form in dforms{
        formCheck(url,req,rsp,form)
    }

}

formCompare = func(pform,form){
    paction = xpath.SelectAttr(pform,"action")
    action = xpath.SelectAttr(form,"action")
    if paction != action {
        return false
    }

    pinputs = xpath.Find(pform, "//input")
    inputs = xpath.Find(form, "//input")
    if len(pinputs) != len(inputs){
        return false
    }

    for i = 0; i < len(pinputs);i++ {
        if xpath.SelectAttr(pinputs[i],"name") != xpath.SelectAttr(inputs[i],"name"){
            return false
        }
    }

    return true
}

paramBlackList = ["token","csrf","xsrf","tkn"]
submitBlackList = ["login","register","search","Login","Register","Search"]


formCheck = func(url,req,rsp,form){
    //Detect whether it is a form controlled by js, without action, and with id
    action = xpath.SelectAttr(form,"action")
    id = xpath.SelectAttr(form,"id")
    if action == "" && id != ""{
        return
    }

    inputs = xpath.Find(form, "//input")

    for input in inputs{
        if !xpath.ExistedAttr(input,"hidden"){
            continue
        }
        for name in paramBlackList{
            if str.Contains(xpath.SelectAttr(input,"name"),name){
                return
            }
        }
    }
    interHtml =  xpath.OutputHTML(form)
    for name in submitBlackList{
        if str.Contains(interHtml,name){
            return
        }
    }
    csrfLog(newResult(url,req,rsp))
}

corsCheck = func(ishttps,req,rsp,url){
    //Check whether it is a cross-domain request and whether the request is valid
    if poc.GetStatusCodeFromResponse(rsp) != 200 || poc.GetHTTPPacketHeaders(req)["Origin"] == nil {
        return
    }
    headers = poc.GetHTTPPacketHeaders(rsp)
    if headers["Access-Control-Allow-Origin"] == nil || headers["Content-Length"] == 0 {
        return
    }
    if headers["Access-Control-Allow-Origin"] == "*"{
        corsLog(newResult(url,req,rsp))
    }

    domain = str.RandStr(5)+".example.com"
    lowHttp,_,err = poc.HTTPEx(req, poc.replaceHeader("Origin", domain))
    checkErr(err)
    newHeaders = poc.GetHTTPPacketHeaders(lowHttp.RedirectRawPackets[0].Response)
    if newHeaders["Access-Control-Allow-Origin"] != nil{
        if str.Contains(newHeaders["Access-Control-Allow-Origin"] ,domain){
            corsLog(newResult(url,req,rsp))
        }
    }

}

mirrorFilteredHTTPFlow = func(ishttps, url, req, rsp, body) {

    corsCheck(ishttps,req,rsp,url)

    headers = poc.GetHTTPPacketHeadersFull(rsp)
    if  len(headers["Content-Type"]) == 0 || !str.Contains(headers["Content-Type"][0],"html"){
        return
    }
    csrf_Detect(url, req, rsp, body, ishttps)
}