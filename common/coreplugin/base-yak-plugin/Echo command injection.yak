/*
command execution:
ping -c {pos}

generally has two situations, relatively safe scenarios:
1. Change the default original value to an unsafe value: a{}
*/

# mirrorNewWebsitePathParams Each time a new website path appears with some parameters, the parameters pass through common locations and parameter names Deduplication, the first HTTPFlow deduplication is called here. The
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    for param in freq.GetCommonParams() {
        // Do not test cookies
        if "cookie" in f`${param.Position()}`.Lower() {
            log.info("skip: %v", param.String())
            continue
        }

        originValue = ""
        try {
            originValue = f`${param.Value()[0]}`
        } catch err {
            originValue = sprint(param.Value())
        }

        if "submit" == param.Name().Lower() {
            continue
        }

        // constructs a random string command injection; this will cause the first cmd error, resulting in false||cmd2, execute the second command
        negativeValue = f`a${randstr(20)}`.Lower()
        if checkBashExpr(negativeValue, param, "||", "") || checkWindowsCmdExpr(negativeValue, param, "||", "") || checkWindowsPowershellExpr(negativeValue, param, "||", "") {
            return
        }

        // uses the original value to construct command injection, which will cause the first request to be normal, causing true&&cmd2 to execute the second command
        if checkBashExpr(originValue, param, "&&", "") || checkWindowsCmdExpr(negativeValue, param, "||", "")  || checkWindowsPowershellExpr(negativeValue, param, "||", "") {
            return
        }

    }
}

description = `Command Injection (Command Injection) is a common security attack method that occurs when an application fails to properly validate user input. Through this vulnerability, an attacker can execute arbitrary system commands on the server, thereby controlling the server or accessing sensitive information. Potential risks of

Attack method: Command injection usually occurs when an application directly uses user input to construct system commands. An attacker can enter special characters or commands to cause the original commands to be changed to perform the operations the attacker wants.

: Command injection is extremely risky because it allows attackers to execute arbitrary commands, including reading, modifying, deleting data, and even controlling the entire system. This attack method poses a great threat to the security and stability of the system.

protection measures: The main method to prevent command injection is strict validation and filtering of user input. Any input used to construct system commands should be considered a potential security risk. Additionally, applications should limit their ability to execute system commands, for example, by running under a low-privilege user account or using secure APIs instead of executing system commands directly.
`
solution = `
1. Input validation: Strictly validate and filter all user input, especially those that may be used to construct system commands. You can use methods such as whitelists or regular expressions to verify the legality of the input.

2. Principle of least privilege: Applications should run with the least privileges, so that even if command injection occurs, the attacker cannot execute some high-privilege system commands.

3. Use safe APIs: Try to avoid directly executing system commands, but use safe APIs that can perform necessary security checks.

4. Parameterized command : When constructing system commands, you should try to use parameterized commands instead of string concatenation to avoid command injection.

5. Error handling: Detailed error messages should not be displayed to users to prevent attackers from using this information for attacks.
`

checkBashExpr = (prefix, param, boundrayPrefix, boundraySuffix) => {
    for boundary in [
        [boundrayPrefix, boundraySuffix],
        [";", "#"],   // linux cmd1; cmd2
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            payload := prefix + f"${boundary[0]} expr ${result.num1} - ${result.num2}${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"Command Injection:${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("Command Injection"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                    risk.description(description),
                    risk.solution(solution),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}

checkWindowsPowershellExpr = (prefix, param, boundaryPrefix, boundarySuffix) => {
    for boundary in [
        [";", ""],                        // multi stmts
        [boundaryPrefix, boundarySuffix], // powershell 7+ || && available
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            payload := prefix + f"${boundary[0]} ${result.num1}-${result.num2} ${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"Command Injection:${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("Command Injection"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                    risk.description(description),
                    risk.solution(solution),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}

checkWindowsCmdExpr = (prefix, param, boundrayPrefix, boundraySuffix) => {
    for boundary in [
        [boundrayPrefix, boundraySuffix],
    ] {
        result = fuzz.FuzzCalcExprInt32Safe()
        try {
            randvar = f`${randstr(6)}`
            payload := prefix + f"${boundary[0]} set /a ${randvar}=${result.num1}-${result.num2} && call echo %${randvar}% ${boundary[1]}"
            rsp := param.Fuzz(payload).ExecFirst()~
            rspRaw = string(rsp.ResponseRaw)
            if result.result in rspRaw {
                risk.NewRisk(
                    rsp.Url,
                    risk.title("Command(Windows) Injection in %v (%v: %v)" % [rsp.Url, param.Position(), param.Name()]),
                    risk.titleVerbose(f"Windows Command Injection:${rsp.Url} (${param.Position()}: ${param.Name()})"),
                    risk.severity("critical"),
                    risk.type("command-injection"), risk.typeVerbose("Command Injection"),
                    risk.request(rsp.RequestRaw), risk.response(rsp.ResponseRaw),
                    risk.payload(f`PAYLOAD: ${payload} EXPECT: ${result.result}`), risk.parameter(param.String()),
                    risk.description(description),
                    risk.solution(solution),
                )
                return true
            }
        } catch err {
            dump(err)
        }
    }
    return false
}