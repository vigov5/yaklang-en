# mitm plugin template
availableSSRFParamNames = [
    "share", "wap", "url", "link", "uri",
    "src", "source", "redirect", "redirect_to",
    "redirect*", "sourceurl", "u", "3g",
    "web", "sourceurl", "sourceuri", "domain", 
    "image", "imageurl",
]

NewThreadPool = func(size){
    inputChan = make(chan var)
    var consumer
    consumerWG = sync.NewWaitGroup()
    productorWG = sync.NewWaitGroup()
    threadPool = {
        "consumer":f =>{
            consumer = (id,data)=>{
                try {
                    f(id, data)
                } catch err {
                    log.warn("run consumer error: %v"%err)
                }
            }
            return threadPool
        },
        "productor":f=>{
            productorWG.Add(1)
            go fn{
                try {
                    f(inputChan)
                } catch err {
                    log.warn("run productor error: %v"%err)
                }
                productorWG.Done()
            }
            return threadPool
        },
        "start":()=>{
            for id = range size{
                consumerWG.Add(1)
                go func(id){
                    for data in inputChan{
                        if consumer{
                            consumer(id,data)
                        }else{
                            log.warn("not set consumer for data: %v"%data)
                        }
                    }
                    consumerWG.Done()
                }(id)
            }
            return threadPool
        },
        "wait":()=>{
            productorWG.wait()
            close(inputChan)
            consumerWG.wait()
        }
    }
    return threadPool
}

description = `
Server Side Request Forgery (SSRF) is a network security vulnerability that is caused by attacks. The author constructs and prompts the server to initiate a request. The existence of this vulnerability could allow an attacker to control the server to make network requests, thereby achieving access to unauthorized resources.

Vulnerability Exploit: In an environment where an SSRF vulnerability exists, an attacker can conduct network interactions in the context of the server. This interaction could allow an attacker to gain access to back-end systems, obtain sensitive information, or perform other potentially damaging operations.

Potential risk: The existence of SSRF vulnerability may not only lead to future Authorized resource access may also enable attackers to perform port scans, read local files, and even execute commands. These behaviors may pose a threat to the security and stability of the server.

Protective measures: To prevent SSRF vulnerabilities, a series of security measures need to be taken, such as restricting the servers access to external networks, strictly verifying and filtering user input, and promptly updating and repairing known security vulnerabilities.
`
solution = `
1. Try to avoid unnecessary external HTTP requests from the server: If not necessary, try to avoid initiating external HTTP requests from the server. If it must be initiated, strict input validation and management are required.

2. Limit outbound requests: OK Limit the destination and port of outbound requests at the server level, and prohibit access to the intranet or sensitive ports.

3. Use safe programming practices: All user-generated input should be subject to strict validation and sanitization. Especially those inputs that may be used for network requests should undergo strict whitelist verification.

4. Upgrading and patching: Regular upgrading and patching can repair known SSRF vulnerabilities and prevent attacks Attackers exploit these vulnerabilities.

5. Use a Web Application Firewall (WAF): A WAF can help identify and block SSRF attacks, adding an extra layer of defense.
`

# mirrorNewWebsitePathParams Each time a new website path appears with some parameters, the parameters pass through common locations and parameter names Deduplication, the first HTTPFlow deduplication is called here. The
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    paramName = ""
    pool = NewThreadPool(10)
    pool.consumer((id,data)=>{
        param = data
        paramName = param.Name()
        yakit_output("Basic SSRF test: Parameter name [%v]" % [paramName])
        domain,token,err = risk.NewDNSLogDomain()
        if err {
            yakit_output("Failed to obtain dnslog: ^v, skipping the detection of parameter [%s]" % [err,paramName])
            return
        }
        payload = "http://%s"%domain
        result, err = param.Fuzz(payload).ExecFirst()
        if err != nil {
            yakit_output("SSRF failed to send the request.")
            return
        }
        if result.Error {
            yakit_output("Request [%v] failed: %v" % [result.Url, result.Error])
        } else {
            target = str.ParseStringUrlToWebsiteRootPath(result.Url)
            if risk.CheckDNSLogByToken(token)[1] == nil {
                dnslogRiskTitle = "The %s parameter of the target path %s received Dnslog echo, and there may be an SSRF vulnerability." % [result.Url,paramName]
                yakit_output(dnslogRiskTitle)
                haveHttpReverse = false
                middleReason = "The HTTP reverse connection request was not received."
                httpReverseToken = risk.NewLocalReverseHTTPUrl()
                if httpReverseToken == ""{
                    middleReason = "Yak Bridge is not configured as a public network mapping, and the URL with Token cannot be obtained Callback"
                }else{
                    result, err = param.Fuzz(payload).ExecFirst()
                    if err != nil {
                        yakit_output("SSRF failed to send the request.")
                        middleReason = "Failed to send HTTP reverse connection test request"
                    }else{
                        if result.Error {
                            yakit_output("Request [%v] failed: %v" % [result.Url, result.Error])
                            middleReason = "Failed to send HTTP reverse connection test request"
                        }else{
                            haveHttpReverse = risk.HaveReverseRisk(httpReverseToken)
                        }
                    }
                }
                if haveHttpReverse{
                    title = "The %s parameter of the target path %s received an HTTP reverse connection, and there is an SSRF vulnerability." % [result.Url,paramName]
                    yakit_output(title)
                    risk.NewRisk(
                        result.Url,
                        risk.titleVerbose("Target %s has SSRF vulnerability" % target),
                        risk.title(title),
                        risk.details({
                            "request": string(result.RequestRaw),
                            "response": string(result.ResponseRaw),
                            "url": result.Url,
                        }),
                        risk.level("critical"),
                        risk.payload(payload),
                        risk.parameter(paramName),
                        risk.token(token),
                        risk.description(description), 
                        risk.solution(solution),
                    )
                }else{
                    risk.NewRisk(
                        result.Url,
                        risk.titleVerbose("Target %s may have SSRF vulnerability" % target),
                        risk.details({
                            "request": string(result.RequestRaw),
                            "response": string(result.ResponseRaw),
                            "url": result.Url,
                        }),
                        risk.level("middle"),
                        risk.title("Received Dnslog echo, but did not receive HTTP echo (the reason is `%s`), there may be an SSRF vulnerability" % middleReason),
                        risk.payload(payload),
                        risk.parameter(paramName),
                        risk.token(token),
                        risk.description(description), 
                        risk.solution(solution), 
                    )
                }
            }
        }
    }).start()
    var freq
    try {
        freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    } catch err {
        yakit.Error("Failed to construct Fuzz Request: %v" % err)
        return
    }
    pool.productor(c=>{
        for index, param = range freq.GetCommonParams() {
            originValue = param.Value()
            if typeof(originValue).Name() == typeof([]).Name() && originValue[0] != undefined{
                originValue = originValue[0]
            }
            originValue,err = codec.DecodeUrl(sprint(originValue))
            if err{
                log.Error(err)
                continue
            }
            if str.MatchAllOfRegexp(originValue,"^\\w+://")  || str.StringSliceContains(availableSSRFParamNames, str.ToLower(param.Name())) {
                c<-param
            }
        }
    })
    pool.wait()
}
