swaggerDESC = `
wagger is a tool for designing, building, documenting and consuming RESTful web services, which generates an interactive API console so that developers and users can understand and use the API.

If your Swagger interface is publicly exposed, there may be the following risks:

Information leakage: Swagger will list all API endpoints, input parameters, output results and possible error codes in detail. If this information is obtained by malicious users, it may be easier for them to find weaknesses in the system and attack it.

Unauthorized access: If the Swagger interface does not have appropriate access control, then anyone can use these APIs, which may lead to data leakage, data tampering or other security issues. .

API Abuse: Even if the API itself is secure, a malicious user may be able to conduct a denial of service (DoS) attack by calling the API in large numbers.

Therefore, generally speaking, you should disable the Swagger interface in a production environment, or at least add appropriate access controls to prevent unauthorized access.
`
solution = `
1. Disable Swagger in production environments: In production environments, Swagger should be disabled to prevent exposure of sensitive information and unauthorized API access. Swagger is mainly used in development and testing environments to help developers understand and use APIs.

2. Implement access control: If Swagger must be enabled in a production environment, strict access control should be implemented to ensure that only authorized personnel can access the Swagger interface. This can be achieved through methods such as network firewalls, IP whitelisting, authentication and authorization.

3. Restrict API usage: To prevent API abuse, API usage restrictions should be implemented, such as limiting the number of times each user can call the API within a certain period of time.

4. Use HTTPS: All API calls should be made over HTTPS to prevent data from being stolen or tampered with during transmission.
`

filter := str.NewFilter()
check = result => {
    yakit.Info("executed: %v", result.Url)
    _, body = poc.Split(result.ResponseRaw)~
    schema := json.loads(body)
    isOpenAPI2 = schema["swagger"] == undefined ? false : schema.swagger.Contains("2.")
    isOpenAPI3 = schema["openapi"] == undefined ? false : schema.openapi.Contains("3")
    if isOpenAPI2 {
        yakit.Info("Found Swagger OPENAPI 2.0: %v", result.Url)
    }
    if isOpenAPI3 {
        yakit.Info("Found Swagger OPENAPI 3.0: %v", result.Url)
    }

    if isOpenAPI2 {
        risk.NewRisk(
            result.Url,
            risk.title("Swagger(OpenAPI 2) on: %v" % result.Url),
            risk.severity("low"),
            risk.description(swaggerDESC),
            risk.solution(solution),
            risk.type("sensitive-disclosure"),
            risk.typeVerbose("Sensitive information leakage"),
            risk.request(result.RequestRaw),
            risk.response(result.ResponseRaw),
        )
    }

    if isOpenAPI3 {
        risk.NewRisk(
            result.Url,
            risk.title("Swagger(OpenAPI 3) on: %v" % result.Url),
            risk.severity("low"),
            risk.description(swaggerDESC),
            risk.solution(solution),
            risk.type("sensitive-disclosure"),
            risk.typeVerbose("Sensitive information leakage"),
            risk.request(result.RequestRaw),
            risk.response(result.ResponseRaw),
        )
    }
}

# mirrorNewWebsite Each new one appears Website, the first request for this website, will be called here!
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    try {
        freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
        // found swagger/v1/swagger.json
        for result in freq.FuzzPath("/swagger/{{list(v|V)}}{{int(1-2)}}/swagger.json").Exec()~ {
            if filter.Exist(result.Url) {
                continue
            }
            filter.Insert(result.Url)
            check(result)
        }
    } catch err {
        yakit.Error("mirror NewWebsite ERROR: %v", err)
    }
}

# mirrorNewWebsitePath Every time a new website path appears, the first request for this website path will be processed here. Incoming callback
mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))~
    var payload = ""
    if freq.GetPath().HasSuffix("/") {
        payload = `{{list(v1/|v2/)}}swagger.json`
    } else {
        payload = `/{{list(v1/|v2/)}}swagger.json`
    }
    for result in freq.FuzzPathAppend(payload).Exec()~ {
        if filter.Exist(result.Url) {
            continue
        }
        filter.Insert(result.Url)
        check(result)
    }
}


