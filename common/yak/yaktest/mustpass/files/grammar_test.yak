/* Test the operator */

// Test equality operator
assert(make([]string)==nil)

// Test multiplication operator
assert 2*3 == 6, "multiplication failed"

// Test the division operator
assert 7/4 == 1, "division failed" 

// Test the modulo operator
assert 7%4 == 3, "modulus failed" 

// Test left shift operator
assert 1<<2 == 4, "left shift failed" 

// Test less than operator
assert 1 < 2, "less than failed" 

// Test right shift operator
assert 8>>2 == 2, "right shift failed" 

// Test greater than operator
assert 2 > 1, "greater than failed" 

// Test the bitwise AND operator
assert 5&3 == 1, "bitwise and failed"

// Test addition operator
assert 2+3 == 5, "addition failed" 

// Test subtraction operator
assert 5-2 == 3, "subtraction failed" 

// Test XOR operator
assert 5^3 == 6, "bitwise xor failed" 

// Test bitwise OR operator
assert 5|3 == 7, "bitwise or failed" 

// Test the equality operator
assert 3 == 3, "equality failed" 

// Test less than or equal to operator
assert 3 <= 4, "less than or equal to failed" 

// Test greater than or equal to operator
assert 4 >= 3, "greater than or equal to failed" 

// Test inequality operator
assert 3 != 2, "not equal to failed" 

// Test logical AND operator
assert true && true == true, "logical and failed" 

// Test logical or operator
assert true || false == true, "logical or failed" 

// Test negation operator
assert !true == false, "not failed" 

// Test bitwise negation operator
assert ^5 == -6, "bitwise not failed"

/* Test arrow function */
 a = a => a + 1
assert a(1) == 2, "arrow function failed"

/* Test function */
func add(a, b) {
    return a + b
}
assert add(1, 2) == 3, "function failed"

/* Test closure */
func adder(a) {
    return func(b) {
        return a + b
    }
}

assert adder(1)(2) == 3, "closure failed"

/* Test variable parameters */
func sum(a...) {
    s = 0
    for i in a {
        s += i
    }
    return s
}

assert sum(1, 2, 3) == 6, "variadic function failed"

/* Test recursion */
func factorial(n) {
    if n == 0 {
        return 1
    }
    return n * factorial(n - 1)
}

assert factorial(5) == 120, "recursion failed"

/* Test conditional statement */
if 1 == 1 {
    assert true, "if failed"
} else {
    assert false, "if failed"
}

err = 1
if err {}else{
    die("if err failed")
}

/* Test for loop */
i = 0
for ; i < 10; i = i + 1 {
    i+=1
}
assert i == 10, "for failed"

i = 0
for t in [1, 2, 3] {
    i += t
}

assert i == 6, "for failed"

/* Test switch statement */
switch 1 {
case 1:
    assert true, "switch failed"
default:
    assert false, "switch failed"
}

/* Test type conversion */
assert int(1) == 1, "type conversion failed"
assert int(1.2) == 1, "type conversion failed"
assert int("1") == 1, "type conversion failed"
assert int(true) == 1, "type conversion failed"
assert int(false) == 0, "type conversion failed"
assert int(nil) == 0, "type conversion failed"

assert float(1) == 1.0, "type conversion failed"
assert float(1.2) == 1.2, "type conversion failed"
assert float("1.2") == 1.2, "type conversion failed"
assert float(true) == 1.0, "type conversion failed"
assert float(false) == 0.0, "type conversion failed"
assert float(nil) == 0.0, "type conversion failed"

assert string(1) == "1", "type conversion failed"
assert string(1.2) == "1.2", "type conversion failed"
assert string(true) == "true", "type conversion failed"
assert string(false) == "false", "type conversion failed"
assert string(nil) == "", "type conversion failed"

assert bool(1) == true, "type conversion failed"
assert bool(1.2) == true, "type conversion failed"
assert bool("1.2") == true, "type conversion failed"
assert bool(true) == true, "type conversion failed"
assert bool(false) == false, "type conversion failed"
assert bool(nil) == false, "type conversion failed"

/* Test array */
a = [1, 2, 3]
assert a[0] == 1, "array failed"
assert a[-1] == 3, "array failed"
assert a[1:2] == [2], "array failed"
assert a[1:] == [2, 3], "array failed"
assert a[:2] == [1, 2], "array failed"
assert a[::-1] == [3,2,1], "array failed"
assert a[1:2:3] == [2], "array failed"
b = (a,b,c) => c
assert b(a...) == 3, "array failed"

/* Test dictionary */
a = {"a": 1, "b": 2, "c": a => a+1}
assert a["a"] == 1, "dict failed"
assert a["b"] == 2, "dict failed"
assert a["c"](1) == 2, "dict failed"

/* Test exception catching */
try {
    panic("error")
} catch e {
    assert e == "error", "catch failed"
}

/* Test scope */
a = 1
{
    a = 2
}
assert a == 2, "scope failed"

/* Test break */
t = 0
for i = range 100{
    t += 1
    if i == 10 {
        break
    }
}
assert t == 11, "break failed"