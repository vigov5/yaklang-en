yakit.AutoInitYakit()
loglevel("info")

db.DelKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER")

runtimeID = cli.String("runtime_id", cli.setRequired(true))
hostTotal = cli.Int("host_total", cli.setRequired(true))
pingAliveHostTotal = cli.Int("ping_alive_host_total", cli.setDefault(0))
portTotal = cli.Int("port_total", cli.setDefault(0))
reportName = cli.String("report_name")
plugins = cli.Int("plugins", cli.setDefault(10))

cli.check()
if reportName == "" {
    reportName = "reporting"
}


reportInstance = report.New()
reportInstance.From("simple-detect")
defer func {
    err := recover()
    if err != nil {
        yakit.Info("scan report construction failed: %#v", err)
    }

    id = reportInstance.Save()
    yakit.Report(id)
}


severityToRisks = {}
targetToRisks = {}
riskAll = []
potentialRisks = []
noPotentialRisks = []
weakPassWordRisks = []
noWeakPassWordRisks = []

// Risk vulnerability grouping
// env.Get("YAK_RUNTIME_ID")
for riskInstance = range risk.YieldRiskByRuntimeId(runtimeID) {
    if severityToRisks[riskInstance.Severity] == undefined {
        severityToRisks[riskInstance.Severity] = []
    }

    severityToRisks[riskInstance.Severity] = append(severityToRisks[riskInstance.Severity], riskInstance)

    // Classify Risk
    if targetToRisks[riskInstance.IP] == undefined {
        targetToRisks[riskInstance.IP] = []
    }

    targetToRisks[riskInstance.IP] = append(targetToRisks[riskInstance.IP], riskInstance)

    if parseBool(riskInstance.IsPotential) {
        potentialRisks = append(potentialRisks, riskInstance)
    } else {
        noPotentialRisks = append(noPotentialRisks, riskInstance)
    }

    if riskInstance.RiskTypeVerbose == "Weak password" {
        weakPassWordRisks = append(weakPassWordRisks, riskInstance)
    } else {
        noWeakPassWordRisks = append(noWeakPassWordRisks, riskInstance)
    }


    riskAll = append(riskAll, riskInstance)
}


criticalLens = 0
highLens = 0
warningLens = 0
lowLens = 0

for key, value = range severityToRisks {
    if str.Contains(key, "critical") {
        criticalLens = len(value)
    }

    if str.Contains(key, "high") {
        highLens = len(value)
    }

    if str.Contains(key, "warning") {
        warningLens = len(value)
    }

    if str.Contains(key, "low") {
        lowLens = len(value)
    }

}


if criticalLens > 0 {
    reportInstance.Raw({"type": "report-cover", "data": "critical"})
}

if criticalLens == 0 && highLens > 0 {
    reportInstance.Raw({"type": "report-cover", "data": "high"})
}

if criticalLens == 0 && highLens == 0 && warningLens > 0 {
    reportInstance.Raw({"type": "report-cover", "data": "warning"})
}

if criticalLens == 0 && highLens == 0 && warningLens == 0 && lowLens > 0 {
    reportInstance.Raw({"type": "report-cover", "data": "low"})
}

if criticalLens == 0 && highLens == 0 && warningLens == 0 && lowLens == 0 {
    reportInstance.Raw({"type": "report-cover", "data": "security"})
}


portsLine = []
aliveHostCountList = []
openPortCount = 0

portChan := db.QueryPortsByTaskName(runtimeID)~
for port := range portChan {
    openPortCount += 1
    if port.Host not in aliveHostCountList {
        aliveHostCountList = append(aliveHostCountList, port.Host)
    }
    portsLine = append(portsLine, {
        "Address": {"value": port.Host, "sort": 1},
        "Port": {"value": port.Port, "sort": 2},
        "Protocol": {"value": port.Proto,  "sort": 3 },
        "Fingerprint": {"value": port.ServiceType, "sort": 4 },
        "Website Title": {"value": port.HtmlTitle, "sort": 5 }
    })
}


aliveHostCount = len(aliveHostCountList)

if pingAliveHostTotal > 0 {
    aliveHostCount = pingAliveHostTotal
}

reportInstance.Title(reportName)

reportInstance.Markdown(`# 1. Project Overview

## 1.1 Test purpose

This security test is conducted under the authorization of the company. The purpose is to analyze the security status of the website system, detect vulnerabilities and security issues of the application system, and thereby fully understand and master the information of the application system. Security threats and risks provide a basis for security tuning and reinforcement construction of application systems, and guide the implementation of tuning and reinforcement work. Specific goals include: helping customers understand the current security status of application systems and discover security vulnerabilities in authorized target systems; Provide detailed analysis and reinforcement recommendations for detected vulnerabilities.

## 1.2 Security testing principles

The following principles were strictly followed in this security test:

### 1.2.1 Standardization principle

test plan The design and implementation should be carried out in accordance with relevant industry, national, and international standards;

are as follows:

1. GB/T 20270-2006 Information security technology network basic security technical requirements;
1. GB/T 20271-2006 Information security technology General security technical requirements for information systems;
1. GB/T 20984-2007 Information Security Technology Information Security Risk Assessment Specification;
1. ISO 27001:2013 Information technology security technology information security management system requirements;
1. ISO 27002:2013 Information Technology Security Technology Practical Rules for Information Security Control;
1. ISO 13335:2001 Information Technology Information Security Management Guide;
1. Cobit5:2012 Information system and technical control objectives;
1. IATF 16949:2016 Information Assurance Technology frame.

### 1.2.2 Normative principles

service provider should be well standardized to facilitate project tracking and Control;

### 1.2.3 Minimum impact principle

testing work should try to avoid affecting the normal operation of the system and network, and not cause damage to the normally operating system and network or cause production shutdown;

### 1.2.4 Confidentiality principle

The process and results of the

# 2. Test method

## 2.1 Overview

Security testing work is mainly for For users who have already adopted security protection measures (security products, security services) or are about to adopt security protection measures, clarifying the current security status of the network has great guiding significance for the next step of security construction. Penetration testing services are used to verify the ability of networks and systems to resist attacks by attackers under current security protection measures.

security testing is to discover security vulnerabilities and hidden dangers at the network, system and application levels, and to propose corresponding rectification suggestions.

## 2.2 Risk level description

|  Risk level   | Level classification based on  |
|  ----  | ----  |
| <font color="#da4943">serious</font>  | 1) Vulnerability that directly obtains core system server permissions. Including but not limited to arbitrary command execution on the core system server, uploading to obtain WebShell, SQL injection to obtain system permissions, remote code execution vulnerabilities, etc.;<br/> 2) Serious sensitive information leakage. Including but not limited to SQL injection of important data (such as important account passwords) and leakage of source file compression packages containing sensitive information. |
| <font color="#d83931">High risk</font>  | 1) High risk information leakage, including but not limited to SQL injection vulnerabilities that can obtain general data, source code leakage, and arbitrary file reading and downloading vulnerabilities;<br/> 2) Unauthorized access, including but not limited to bypassing verification and directly accessing the management background, background login with weak passwords, and Weak passwords for other services, etc. |
| <font color="#dc9b02">Medium risk</font>  | 1) Vulnerabilities that require interaction to affect users. Including but not limited to stored XSS that can cause real harm, important sensitive operations CSRF;<br/> 2) Ordinary information leakage. Including but not limited to obtaining user sensitive information, etc.;<br/> 3) Common unauthorized operations. Including but not limited to unauthorized viewing of non-core information, records, etc.;<br/> 4) Common logic design defects. Including but not limited to SMS verification bypass and email verification bypass. |
| <font color="#43ab42">Low-risk</font>  | 1) Minor information leakage of some value. For example, phpinfo, test data leakage, etc.;<br/> 2) Logical design flaws. Including but not limited to graphical verification code bypass;<br/> 3) Reflected XSS, URL jump, non-important with certain slight impact Sensitive operations CSRF vulnerabilities, etc. |

# 3. Overview of test results

## 3.1 Overall security status
`)

// Detection port scan results
// targetRawLen = len(str.ParseStringToHosts(targetRaw))
// redlinePortsLen = len(str.ParseStringToPorts(ports)) + len(str.ParseStringToPorts(ports))
totalTasks = hostTotal * portTotal

riskGrade = "Low-risk"
riskGradeColor = "#008000"
if criticalLens > 0{
    riskGrade = "Ultra Risk"
    riskGradeColor = "#8B0000"
} else if highLens > 0{
    riskGrade = "High risk"
    riskGradeColor = "#FF4500"
} else if warningLens > 0{
     riskGrade = "Medium risk"
     riskGradeColor = "#FFA500"
}
riskGradeStyleColor = sprintf(`<span style='color:%s;font-weight:bold'>%s</span>`, riskGradeColor, riskGrade)
reportInstance.Markdown(sprintf(
    `
The overall security status of this test is as follows:

- Risk level: %s
- Number of scanned ports: %v
- open port Number: %v
- number of surviving hosts: %v
- Number of scanned hosts: %v
- Number of ports involved in each host: %v

`,
    riskGradeStyleColor,
    totalTasks,
    openPortCount,
    aliveHostCount,
    hostTotal,
    portTotal,
))
// Output vulnerability map related content
total := len(riskAll)
reportInstance.Markdown(sprintf(
    `
This test found the following vulnerabilities and compliance risks:

- Total:**%v**ä¸ª
- Critical:<span style="color:#8B0000;font-weight:bold">%v</span>
- High risk:<span style="color:#FF4500;font-weight:bold">%v</span>
- Medium risk:<span style="color:#FFA500;font-weight:bold">%v</span>
- Low risk:<span style="color:#008000;font-weight:bold">%v</span>

appendix contains vulnerability details, please fix it in time if necessary.

`,
    total,
    criticalLens,
    highLens,
    warningLens,
    lowLens,
))

reportInstance.Raw({"type": "bar-graph", "title": "Vulnerability and compliance risk summary", "data": [{"name": "Severe vulnerability", "value": criticalLens}, {"name": "High-risk vulnerabilities", "value": highLens}, {"name": "Medium risk", "value": warningLens}, {"name": "Low-risk vulnerability", "value": lowLens}], "color": ["#f70208", "#f9c003", "#2ab150", "#5c9cd5"]})


// IP vulnerability information statistics
// ipRisksStr = ""
ipRisksStr = []

// Vulnerability level classification array
criticalRisks = []
highRisks = []
warningRisks = []
lowRisks = []
secureRisks = []
// Compliance inspection level classification array
criticalPotentialRisks = []
highPotentialRisks = []
warningPotentialRisks = []
lowPotentialRisks = []
secureCountScaleRisks = []

// Survival Asset Statistics
criticalCountScale = 0
highCountScale = 0
warningCountScale = 0
lowCountScale = 0
secureCountScale = 0
infoPotentialRisk = []
for target, risks = range targetToRisks {
    if target == "" {
        continue
    }

    criticalCount = 0
    highCount = 0
    warningCount = 0
    lowCount = 0
    secureCount = 0
    riskLevel = "Security"
    for _, riskIns := range risks {
        if  str.Contains(riskIns.Severity, "info") {
            infoPotentialRisk = append(infoPotentialRisk, riskIns)
        }
        if str.Contains(riskIns.Severity, "critical") {
            criticalCount++
            if parseBool(riskIns.IsPotential) {
                criticalPotentialRisks = append(criticalPotentialRisks, riskIns)
            } else {
                criticalRisks = append(criticalRisks, riskIns)
            }

        }

        if str.Contains(riskIns.Severity, "high") {
            highCount++
            if parseBool(riskIns.IsPotential) {
                highPotentialRisks = append(highPotentialRisks, riskIns)
            } else {
                highRisks = append(highRisks, riskIns)
            }

        }

        if str.Contains(riskIns.Severity, "warning") {
            warningCount++
            if parseBool(riskIns.IsPotential) {
                warningPotentialRisks = append(warningPotentialRisks, riskIns)
            } else {
                warningRisks = append(warningRisks, riskIns)
            }

        }

        if str.Contains(riskIns.Severity, "low") {
            lowCount++
            if parseBool(riskIns.IsPotential) {
                lowPotentialRisks = append(lowPotentialRisks, riskIns)
            } else {
                lowRisks = append(lowRisks, riskIns)
            }

        }

        if  str.Contains(riskIns.Severity, "info") {
           secureCount++
            if parseBool(riskIns.IsPotential) {
                secureCountScaleRisks = append(secureCountScaleRisks, riskIns)
            } else {
                secureRisks = append(secureRisks, riskIns)
            }
        }

    }
    colorTag = ""
    if criticalCount > 0 {
      riskLevel = "Ultra Risk"
      colorTag = "#8B0000"
      criticalCountScale = criticalCountScale + 1
    } else if highCount > 0 {
      riskLevel = "High risk"
      colorTag = "#FF4500"
      highCountScale = highCountScale + 1
    } else if warningCount > 0 {
      riskLevel = "Medium risk"
      colorTag = "#FFA500"
      warningCountScale = warningCountScale + 1
    } else if lowCount > 0 {
      riskLevel = "Low risk"
      colorTag = "#008000"
      lowCountScale = lowCountScale + 1
    } else if secureCount > 0 {
      secureCountScale = secureCountScale + 1
    }

    allCount = criticalCount + highCount + warningCount + lowCount
    if riskLevel != "Security" {
        ipRisksStr = append(ipRisksStr, {
            "Assets": {"value": target, "jump_link": target, "sort": 1},
            "Risk level": {"value": riskLevel,"color": colorTag, "sort": 2},
            "Severe risk": {"value": criticalCount, "color": "#8B0000", "sort": 3 },
            "High risk": {"value": highCount, "color": "#FF4500", "sort": 4 },
            "Medium risk": {"value": warningCount, "color": "#FFA500", "sort": 5 },
            "Low risk": {"value": lowCount, "color": "#008000", "sort": 6 },
            "Total": {"value": allCount, "sort": 7}
        })
    }
}


// reportInstance.Raw({"type": "pie-graph", "title":"Survival Asset Statistics", "data": [{"name": "Ultra Risk", "value": criticalCountScale, "color": "#f2637b"}, {"name": "High risk", "value": highCountScale, "color": "#fbd438"}, {"name": "Medium risk", "value": warningCountScale, "color": "#4ecb73"}, {"name": "Low-risk", "value": lowCountScale, "color": "#59d4d4"}, {"name": "Security", "value": secureCountScale, "color":  "#39a1ff"}, {"name": "Survival Assets", "value": aliveHostCount, "direction": "center", "color":  "#ffffff"} ] })

aliveHostList = []
aliveHostKey = 0
// Portable Platform
for aliveHost = range db.QueryAliveHost(runtimeID) {
    aliveHostKey = aliveHostKey + 1
    aliveHostList = append(aliveHostList,
        [aliveHostKey, aliveHost.IP]
    )
}
if len(aliveHostList) == 0 {
    for _, host := range aliveHostCountList{
        aliveHostKey = aliveHostKey + 1
        aliveHostList = append(aliveHostList,
            [aliveHostKey, host]
        )
    }
}
reportInstance.Markdown("<br/>")
reportInstance.Raw({"type": "pie-graph", "title":"Survival Asset Statistics", "data": [{"name": "Survival Assets", "value": len(aliveHostList), "color": "#43ab42"}, {"name": "Unknown", "value": hostTotal-len(aliveHostList), "color": "#bfbfbf"}, {"name": "Total assets", "value": hostTotal, "direction": "center", "color": "#ffffff"} ]})
reportInstance.Raw({"type": "pie-graph", "title":"Risk asset statistics", "data": [{"name": "Ultra Risk", "value": criticalCountScale, "color":"#8B0000"}, {"name": "High risk", "value": highCountScale, "color":"#FF4500"}, {"name": "Medium risk", "value": warningCountScale, "color": "#FFA500"}, {"name": "Low-risk", "value": lowCountScale, "color": "#FDD338"}, {"name": "Security", "value": aliveHostCount-len(ipRisksStr), "color": "#43ab42"}, {"name": "Survival Asset Statistics", "value": aliveHostCount, "direction": "center", "color": "#ffffff"} ]})

reportInstance.Markdown("#### Summary of Surviving Assets")
if len(aliveHostList) > 0 {
    reportInstance.Markdown(", the surviving assets list will display all surviving assets. If there are vulnerabilities and risks, they will be displayed in the risk assets list. If they do not appear in the risk assets list, they will be considered safe by default.")
    reportInstance.Table(
        ["serial number", "Survival Assets"],
        aliveHostList...,
    )
} else {
    reportInstance.Markdown("No surviving assets")
}

reportInstance.Markdown("#### Risk asset summary")
if len(ipRisksStr) > 0 {
    ipRisksList := json.dumps({ "type": "risk-list", "dump": "risk-list", "data": ipRisksStr })
    reportInstance.Raw(ipRisksList)
} else {
    reportInstance.Markdown("No asset summary")
}


// Port scanning statistics display
reportInstance.Markdown("## 3.2 Port scanning statistics")
if len(portsLine) > 0 {
    reportInstance.Raw(json.dumps({ "type": "search-json-table", "dump": "search-json-table", "data": portsLine }))
} else {
    reportInstance.Markdown("No port scan")
}

// plug-in Scan status table shows
// reportInstance.Markdown("## 3.3 Plug-in scan status statistics")
// reportInstance.Markdown(sprintf("Involves scanning plug-ins: %v", plugins))

// Risk statistics display
reportInstance.Markdown("## 3.3 Risk Statistics")

reportInstance.Markdown("### 3.3.1 Vulnerability statistics")
loopholeCriticalLens = 0
loopholeHighLens = 0
loopholeWarningLens = 0
loopholeLowLens = 0
if len(noPotentialRisks) == 0 {
    reportInstance.Raw({"type": "report-cover", "data": "security"})
} else {
    for index, info = range noPotentialRisks {

        if str.Contains(info.Severity, "critical") {
            loopholeCriticalLens = loopholeCriticalLens + 1
        }

        if str.Contains(info.Severity, "high") {
            loopholeHighLens = loopholeHighLens + 1
        }

        if str.Contains(info.Severity, "warning") {
            loopholeWarningLens = loopholeWarningLens + 1
        }

        if str.Contains(info.Severity, "low") {
           loopholeLowLens = loopholeLowLens + 1
        }
    }

}
if loopholeCriticalLens > 0 || loopholeHighLens > 0 || loopholeWarningLens > 0 || loopholeLowLens > 0 {
    reportInstance.Raw({"type": "bar-graph", "data": [{"name": "Severe vulnerability", "value": loopholeCriticalLens}, {"name": "High-risk vulnerabilities", "value": loopholeHighLens}, {"name": "Medium risk", "value": loopholeWarningLens}, {"name": "Low-risk vulnerability", "value": loopholeLowLens}], "color": ["#f70208", "#f9c003", "#2ab150", "#5c9cd5"]})
} else {
    reportInstance.Markdown("No data")
}

reportInstance.Markdown("### 3.3.2 Vulnerability statistical list")

if len(noPotentialRisks) == 0 {
    reportInstance.Markdown("Vulnerability status")
} else {
    _line = []
    for index, info = range noPotentialRisks {
        level = "-"
        if str.Contains(info.Severity, "critical") {
            level = "serious"
        }

        if str.Contains(info.Severity, "high") {
            level = "High risk"
        }

        if str.Contains(info.Severity, "warning") {
            level = "Medium risk"
        }

        if str.Contains(info.Severity, "low") {
            level = "Low-risk"
        }

        titleVerbose = info.TitleVerbose
        if titleVerbose == "" {
            titleVerbose = info.Title
        }
        addr = "-"
        if info.IP != "" {
            addr = sprintf(`%v:%v`, info.IP, info.Port)
        }

        if !str.Contains(info.Severity, "info") {
            _line = append(_line, {
                "serial number": { "value": index + 1, "sort": 1},
                "Website address": { "value": addr, "sort": 2},
                "Vulnerability": { "value": titleVerbose, "sort": 3},
                "Threat Risk": { "value": level, "sort": 4}
            })
        }
    }
    potentialRisksList := json.dumps({ "type": "potential-risks-list", "dump": "potential-risks-list", "data": _line })
    reportInstance.Raw(potentialRisksList)
}


showPotentialLine = []
complianceRiskCriticalCount = 0
complianceRiskHighCount = 0
complianceRiskWarningCount = 0
complianceRiskLowCount = 0
cpp = cve.NewStatistics("PotentialPie")
println(len(potentialRisks))
for i, riskIns := range potentialRisks {
    level = "-"
    if str.Contains(riskIns.Severity, "critical") {
        level = "serious"
        complianceRiskCriticalCount ++
    }

    if str.Contains(riskIns.Severity, "high") {
        level = "High risk"
        complianceRiskHighCount ++
    }

    if str.Contains(riskIns.Severity, "warning") {
        level = "Medium risk"
        complianceRiskWarningCount ++

    }

    if str.Contains(riskIns.Severity, "low") {
        level = "Low-risk"
        complianceRiskLowCount ++
    }

    c = cve.GetCVE(riskIns.CVE)
    cweNameZh = "-"
    if len(c.CWE) != 0 {
        ccwe = cwe.Get(c.CWE)
        if ccwe != nil {
            cweNameZh = ccwe.NameZh
        }

    }


    cveStr = riskIns.CVE
    if len(cveStr) == 0 {
        cveStr = "-"
    }

    if len(showPotentialLine) < 10 {
        title = str.SplitN(riskIns.Title, ": -", 2)[1]
        showPotentialLine = append(
            showPotentialLine,
            [cveStr, title, sprintf(`%v:%v`, riskIns.IP, riskIns.Port), cweNameZh, level],
        )
    }


    cpp.Feed(c)
    yakit.SetProgress((float(i) / float(len(potentialRisks) - 1)))
    if len(showPotentialLine) == 10 {
        showPotentialLine = append(
            showPotentialLine,
            ["Please see the appendix for more risks...", "", "", "", ""],
        )
    }

}

if len(potentialRisks) != 0 {
    reportInstance.Markdown(sprintf("### 3.3.3 Compliance check risk statistics"))
    if(complianceRiskCriticalCount > 0 || complianceRiskHighCount > 0 || complianceRiskWarningCount > 0 || complianceRiskLowCount > 0) {
        reportInstance.Raw({"type": "bar-graph", "title": "Compliance vulnerability severity statistics", "data": [{"name": "serious", "value": complianceRiskCriticalCount}, {"name": "High risk", "value": complianceRiskHighCount}, {"name": "Medium risk", "value": complianceRiskWarningCount}, {"name": "Low-risk", "value": complianceRiskLowCount}], "color": ["#f70208", "#f9c003", "#2ab150", "#5c9cd5"]})
    }

    reportInstance.Markdown(`Compliance check is based on years of experience and scans to detect versions of dangerous systems and components. Compliance The risk of regulatory inspection is not a vulnerability that will cause actual losses. You can decide whether to upgrade the system version after evaluation with technical personnel.`)
    reportInstance.Table(
        ["CVE number", "Vulnerability title", "Address", "CWE type", "Vulnerability level"],
        showPotentialLine...,
    )

    reportInstance.Markdown(sprintf("### 3.3.4 Compliance check risk analysis"))
        for _, gp := range cpp.ToGraphs() {
            aa = json.dumps(gp)
            reportInstance.Raw(aa)
            if gp.Name == "AttentionRing" {
                reportInstance.Markdown(sprintf(`|  Risk level   | Level classification based on  |
|  ----  | ----  |
| <font color="#da4943">No authentication required and easy to attack through the network</font>  | This type of vulnerability refers to the way that attackers can pass through the Internet or internal network, etc.<font color="#da4943">No identity authentication is required</font>can easily attack the target system or application. Usually, this kind of vulnerability will be exposed in network ports, protocols, services, etc., and attackers**Easy**uses its vulnerabilities to achieve remote control, denial of service attacks, data theft and other attacks. This kind of vulnerability poses a high threat to network security, and corresponding security measures need to be taken in a timely manner to prevent and repair it. |
| <font color="#dc9b02">Attacks pass through the network without authentication</font>  | This type of vulnerability means that attackers can use specific vulnerabilities or technical means to<font color="#dc9b02">Bypass authentication or access control mechanism</font>to obtain sensitive information in the system or application or implement illegal operate. Such vulnerabilities usually involve logical errors, defects or security configuration issues in the system or application. Attackers can use these vulnerabilities to enter the system from the outside or inside and launch attacks. This kind of vulnerability needs to be solved by comprehensively considering network architecture, identity authentication, authorization mechanism and other aspects to ensure the security and reliability of the system or application. |
| <font color="#43ab42">Network attacks</font>  | This This vulnerability type refers to the fact that attackers can use<font color="#43ab42">Known or unknown vulnerability</font>to achieve the goal System or application attacks. This kind of attack usually involves a certain software component or functional module in the system or application. Attackers can launch attacks through vulnerabilities in these components or modules, such as code injection, file inclusion, SQL injection, etc. This kind of vulnerability requires timely updating of the software version in the system or application, and strengthening security testing and auditing to ensure the security and reliability of the system or application.|
`))
            }
        }
} else {
  reportInstance.Markdown(sprintf("### 3.3.3 Compliance check risk statistics"))
  reportInstance.Markdown("No compliance check risk statistics")

  reportInstance.Markdown(sprintf("### 3.3.4 Compliance check risk analysis"))
  reportInstance.Markdown("No Compliance Check Risk Analysis")
}


showWeakPassWordLine = []
for _, riskIns := range weakPassWordRisks {
    level = "-"
    if str.Contains(riskIns.Severity, "critical") {
        level = "serious"
    }

    if str.Contains(riskIns.Severity, "high") {
        level = "High risk"
    }

    if str.Contains(riskIns.Severity, "warning") {
        level = "Medium risk"
    }

    if str.Contains(riskIns.Severity, "low") {
        level = "Low-risk"
    }


    if len(showWeakPassWordLine) < 10 {
        showWeakPassWordLine = append(
            showWeakPassWordLine,
            [riskIns.TitleVerbose, riskIns.IP, riskIns.RiskTypeVerbose, level],
        )
    }

    if len(showWeakPassWordLine) == 10 {
        showWeakPassWordLine = append(
            showWeakPassWordLine,
            ["For more risks, please view", "", "", ""],
        )
    }

}


if len(weakPassWordRisks) != 0 {
     reportInstance.Markdown(sprintf("### 3.3.5 Weak password risk list"))
     reportInstance.Markdown(sprintf(`Perform weak password detection on assets, %v weak passwords were detected, please fix them as soon as possible`, len(weakPassWordRisks)))
     showWeakPassWordFormLine = []
     for k, riskIns := range weakPassWordRisks {
         level = "-"
         if str.Contains(riskIns.Severity, "critical") {
             level = "serious"
         }

         if str.Contains(riskIns.Severity, "high") {
             level = "High risk"
         }

         if str.Contains(riskIns.Severity, "warning") {
             level = "Medium risk"
         }

         if str.Contains(riskIns.Severity, "low") {
             level = "Low-risk"
         }
         addr = "-"
         if riskIns.IP != "" {
            addr = riskIns.IP
         }
         showWeakPassWordFormLine = append(
             showWeakPassWordFormLine,
             [k+1, addr, riskIns.TitleVerbose, level],
         )
     }

     reportInstance.Table(
         ["serial number", "Website address", "Vulnerability title", "Threat Risk"],
         showWeakPassWordFormLine...,
     )
} else {
    reportInstance.Markdown(sprintf("### 3.3.5 Weak password risk list"))
    reportInstance.Markdown("detects weak passwords on assets and detects 0 weak passwords. There is currently no risk of weak passwords")
}

if len(infoPotentialRisk) > 0 {
    reportInstance.Markdown(sprintf("### 3.3.6 Information/Fingerprint list"))
    reportInstance .Markdown(sprintf(`This scan detected information/Fingerprint total<span style="font-weight:bold">%v</span>items, please check carefully whether there is any risk information that needs to be checked.`, len(infoPotentialRisk) ))
    infoPotentialRiskList = []
    for _, infoRisk := range infoPotentialRisk {
        titleVerbose = infoRisk.TitleVerbose
        if titleVerbose == "" {
            titleVerbose = infoRisk.Title
        }
        addr = "-"
        if infoRisk.Host != "" {
            addr = sprintf(`%v:%v`, infoRisk.Host, infoRisk.Port)
        }
        infoPotentialRiskList = append(infoPotentialRiskList, {
            "Title": {
                "sort": 1,
                "value": titleVerbose
            },
            "Risk address": {
                 "sort": 2,
                 "value": addr
             },
            "Vulnerability level": {
                 "sort": 3,
                 "value": infoRisk.Severity
            },
            "Vulnerability type": {
                  "sort": 4,
                  "value": infoRisk.RiskTypeVerbose
            },
        })
    }
    reportInstance.Raw({"type": "info-risk-list", "data": infoPotentialRiskList})

} else {
    reportInstance.Markdown(sprintf("### 3.3.6 Information/Fingerprint list"))
    reportInstance.Markdown("No information yet/Fingerprint")
}

reportInstance.Markdown("# 4. Follow-up rectification suggestions")
if criticalLens > 0 || highLens > 0 {
    reportInstance.Markdown(sprintf(
        `There are %v vulnerabilities and compliance risks in this test, of which<font color='#da4943'>serious</font>has %v vulnerabilities.<font color='#d83931'>High risk</font>has %v vulnerabilities.<font color='#dc9b02'>Medium risk</font>has %v vulnerabilities.<font color='#43ab42'>Low-risk</font>There are %v vulnerabilities. The potential risks are relatively large. Please deploy security protection strategies and security protection technical means as soon as possible, implement security assessments and daily security scans, so that security vulnerabilities can be discovered and repaired in a timely manner, and the systems security protection capabilities can be effectively improved. `,
        total,
        criticalLens,
        highLens,
        warningLens,
        lowLens,
    ))
} else if  warningLens > 0 {
    reportInstance.Markdown(sprintf(
        `There are %v vulnerabilities and compliance risks in this test, of which<font color='#da4943'>serious</font>has %v vulnerabilities.<font color='#d83931'>High risk</font>has %v vulnerabilities.<font color='#dc9b02'>Medium risk</font>has %v vulnerabilities.<font color='#43ab42'>Low-risk</font>vulnerabilities. There are potential risks. Please deploy security protection strategies and security protection technical means as soon as possible, implement security assessments and daily security scans, so that security vulnerabilities can be discovered and repaired in a timely manner, and the systems security protection capabilities can be effectively improved. `,
        total,
        criticalLens,
        highLens,
        warningLens,
        lowLens,
    ))
} else {
    reportInstance.Markdown(sprintf(
        `There are %v vulnerabilities and compliance risks in this test, of which<font color='#da4943'>serious</font>has %v vulnerabilities.<font color='#d83931'>High risk</font>has %v vulnerabilities.<font color='#dc9b02'>Medium risk</font>has %v vulnerabilities.<font color='#43ab42'>Low-risk</font>There are %v vulnerabilities. The overall safety protection is good. `,
        total,
        criticalLens,
        highLens,
        warningLens,
        lowLens,
    ))
}


reportInstance.Markdown("# Appendix:")


// Retrieve Vulnerability Details

func showReportLm(risks) {
    for k, riskIns := range risks {
        payload, _ := codec.StrconvUnquote(riskIns.Payload)
        if payload == "" {
            payload = riskIns.Payload
        }
        request, _ := codec.StrconvUnquote(riskIns.QuotedRequest)
        response, _ := codec.StrconvUnquote(riskIns.QuotedResponse)
        addr = "-"
        if riskIns.Host != "" {
            addr = sprintf(`%v:%v`, riskIns.Host, riskIns.Port)
        }
        titleVerbose = riskIns.TitleVerbose
        if titleVerbose == "" {
            titleVerbose = riskIns.Title
        }
        reportInstance.Raw({"type": "fix-list", "data": {
            "Title": {
                "fold": true,
                "sort": 1,
                "value": titleVerbose
            },
            "Risk address": {
                 "search": true,
                 "sort": 2,
                 "value": addr
             },
            "Vulnerability level": {
                 "sort": 3,
                 "value": riskIns.Severity
            },
            "Marked vulnerability type": {
                  "sort": 4,
                  "value": riskIns.RiskTypeVerbose
            },
            "Vulnerability description": {
                "sort": 5,
                "value":  riskIns.Description
            },
            "Repair suggestions": {
                  "sort": 6,
                  "value": riskIns.Solution
            },
            "Payload": {
                "sort": 7,
                "value": payload
            },
            "HTTP Request": {
                "sort": 8,
                "value": request,
                "type": "code"
             },
            "HTTP Response": {
                "sort": 9,
                "value": response,
                "type": "code"
            }
          }
        })
    }

}

reportInstance.Markdown("## Vulnerability details and recurrence basis")

if len(criticalRisks) > 0 {
    reportInstance.Markdown(sprintf("### Severe vulnerability details"))
    showReportLm(criticalRisks)
}

if len(highRisks) > 0 {
    reportInstance.Markdown(sprintf("### Details of high-risk vulnerabilities"))
    showReportLm(highRisks)
}

if len(warningRisks) > 0 {
    reportInstance.Markdown(sprintf("### Medium risk vulnerability details"))
    showReportLm(warningRisks)
}

if len(lowRisks) > 0 {
    reportInstance.Markdown(sprintf("### Low-severity vulnerability details"))
    showReportLm(lowRisks)
}

if len(criticalRisks) == 0 && len(highRisks) == 0 && len(warningRisks) == 0 && len(lowRisks) == 0 {
    reportInstance.Markdown(sprintf("No vulnerability details"))
}

// Compliance

reportInstance.Markdown("## Compliance check risk details")

// uses map to store the CVE of each year No.
cveTestMap := make(map[string][]var)

func showCVEReportLm(risks, riskSeverity) {

    for _, riskIns := range risks {
        year = riskIns.CVE[4:8]

        if len(cveTestMap[year]) == 0 {
            cveTestMap[year] = []
        }

        cveTestMap[year] = append(cveTestMap[year], riskIns)
    }

    for year, cves := range cveTestMap {
        cveResult = []
        for _, cve := range cves {
            level, description, solution = "-", "-", "-"
            if str.Contains(cve.Severity, "critical") {
                level = `<font color="#da4943">serious</font>`
            }
            if str.Contains(cve.Severity, "high") {
                level = `<font color="#d83931">High risk</font>`
            }
            if str.Contains(cve.Severity, "warning") {
                level = "Medium risk"
            }
            if str.Contains(cve.Severity, "low") {
                level = `<font color="#43ab42">Low-risk</font>`
            }
            if len(cve.Description) > 0 {
                description = cve.Description
            }
            if len(cve.Solution) > 0 {
                solution = cve.Solution
            }
            accessVector := cve.CveAccessVector
            if accessVector == "" {
                accessVector = "UNKNOWN"
            }
            complexity := cve.CveAccessComplexity
            if complexity == "" {
                complexity = "UNKNOWN"
            }
            addr = "-"
            if cve.Host != "" {
                addr = sprintf(`%v:%v`, cve.Host, cve.Port)
            }
            parameter = "-"
            if customHasPrefix(cve.Parameter, "cpe") {
            	parameter = cve.Parameter
            }
            titleVerbose = cve.TitleVerbose
            if titleVerbose == "" {
                titleVerbose = cve.Title
            }
            if cve.Severity == riskSeverity {
               cveResult = append(cveResult, {
                        "Title": {
                            "fold": true,
                            "sort": 1,
                            "value": titleVerbose
                        },
                        "Risk address": {
                             "sort": 2,
                             "value": addr
                        },
                        "Vulnerability level":{
                            "sort": 3,
                            "value": level
                        },
                        "Marked vulnerability type": {
                             "sort": 4,
                             "value": cve.RiskTypeVerbose
                         },
                        "Vulnerability description": {
                              "sort": 5,
                              "value":description
                        },
                        "Repair suggestions": {
                             "sort": 6,
                             "value": solution
                        },
                        "Scanning rules": {
                             "sort": 7,
                             "value": parameter
                        },
                        "network status": accessVector,
                        "Exploitable complexity": complexity
               })
            }
        }
        if len(cveResult) > 0 {
           cveList := json.dumps({ "type": "fix-array-list", "riskSeverity": riskSeverity, "title": sprintf(`%v years CVE list`, year), "data": cveResult })
           reportInstance.Raw(cveList)
        }

    }

}

func customHasPrefix(str, prefix) {
	if len(str) < len(prefix) {
		return false
	}

	for i := 0; i < len(prefix); i++ {
		if str[i] != prefix[i] {
			return false
		}
	}

	return true
}

if len(criticalPotentialRisks) > 0 {
    reportInstance.Markdown(sprintf("### Severe compliance risk details"))
    showCVEReportLm(criticalPotentialRisks, "critical")
}

if len(highPotentialRisks) > 0 {
    reportInstance.Markdown(sprintf("### High Risk Compliance Risk Details"))
    showCVEReportLm(highPotentialRisks, "high")
}

if len(warningPotentialRisks) > 0 {
    reportInstance.Markdown(sprintf("### Medium Risk Compliance Risk Details"))
    showCVEReportLm(warningPotentialRisks, "warning")
}

if len(lowPotentialRisks) > 0 {
    reportInstance.Markdown(sprintf("### Low-risk compliance risk details"))
    showCVEReportLm(lowPotentialRisks, "low")
}

if len(criticalPotentialRisks) == 0 && len(highPotentialRisks) == 0 && len(warningPotentialRisks) == 0 && len(lowPotentialRisks) == 0 {
    reportInstance.Markdown(sprintf("No compliance risk"))
}

